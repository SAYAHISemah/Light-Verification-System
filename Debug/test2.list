
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004054  08004054  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004054  08004054  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004054  08004054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800405c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004068  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000909b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001595  00000000  00000000  000290cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187fb  00000000  00000000  0002b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000967f  00000000  00000000  00043c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3fa  00000000  00000000  0004d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc6c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a38  00000000  00000000  000dc714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f84 	.word	0x08003f84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f84 	.word	0x08003f84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fbd1 	bl	80009d8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb21 	bl	8000888 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbc3 	bl	80009d8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fbb9 	bl	80009d8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb49 	bl	800090c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb3f 	bl	800090c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_ddiv>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	4657      	mov	r7, sl
 80002a0:	464e      	mov	r6, r9
 80002a2:	4645      	mov	r5, r8
 80002a4:	46de      	mov	lr, fp
 80002a6:	b5e0      	push	{r5, r6, r7, lr}
 80002a8:	4681      	mov	r9, r0
 80002aa:	0005      	movs	r5, r0
 80002ac:	030c      	lsls	r4, r1, #12
 80002ae:	0048      	lsls	r0, r1, #1
 80002b0:	4692      	mov	sl, r2
 80002b2:	001f      	movs	r7, r3
 80002b4:	b085      	sub	sp, #20
 80002b6:	0b24      	lsrs	r4, r4, #12
 80002b8:	0d40      	lsrs	r0, r0, #21
 80002ba:	0fce      	lsrs	r6, r1, #31
 80002bc:	2800      	cmp	r0, #0
 80002be:	d100      	bne.n	80002c2 <__aeabi_ddiv+0x26>
 80002c0:	e156      	b.n	8000570 <__aeabi_ddiv+0x2d4>
 80002c2:	4bd4      	ldr	r3, [pc, #848]	; (8000614 <__aeabi_ddiv+0x378>)
 80002c4:	4298      	cmp	r0, r3
 80002c6:	d100      	bne.n	80002ca <__aeabi_ddiv+0x2e>
 80002c8:	e172      	b.n	80005b0 <__aeabi_ddiv+0x314>
 80002ca:	0f6b      	lsrs	r3, r5, #29
 80002cc:	00e4      	lsls	r4, r4, #3
 80002ce:	431c      	orrs	r4, r3
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	041b      	lsls	r3, r3, #16
 80002d4:	4323      	orrs	r3, r4
 80002d6:	4698      	mov	r8, r3
 80002d8:	4bcf      	ldr	r3, [pc, #828]	; (8000618 <__aeabi_ddiv+0x37c>)
 80002da:	00ed      	lsls	r5, r5, #3
 80002dc:	469b      	mov	fp, r3
 80002de:	2300      	movs	r3, #0
 80002e0:	4699      	mov	r9, r3
 80002e2:	4483      	add	fp, r0
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	033c      	lsls	r4, r7, #12
 80002e8:	007b      	lsls	r3, r7, #1
 80002ea:	4650      	mov	r0, sl
 80002ec:	0b24      	lsrs	r4, r4, #12
 80002ee:	0d5b      	lsrs	r3, r3, #21
 80002f0:	0fff      	lsrs	r7, r7, #31
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d100      	bne.n	80002f8 <__aeabi_ddiv+0x5c>
 80002f6:	e11f      	b.n	8000538 <__aeabi_ddiv+0x29c>
 80002f8:	4ac6      	ldr	r2, [pc, #792]	; (8000614 <__aeabi_ddiv+0x378>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d100      	bne.n	8000300 <__aeabi_ddiv+0x64>
 80002fe:	e162      	b.n	80005c6 <__aeabi_ddiv+0x32a>
 8000300:	49c5      	ldr	r1, [pc, #788]	; (8000618 <__aeabi_ddiv+0x37c>)
 8000302:	0f42      	lsrs	r2, r0, #29
 8000304:	468c      	mov	ip, r1
 8000306:	00e4      	lsls	r4, r4, #3
 8000308:	4659      	mov	r1, fp
 800030a:	4314      	orrs	r4, r2
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	4463      	add	r3, ip
 8000310:	0412      	lsls	r2, r2, #16
 8000312:	1acb      	subs	r3, r1, r3
 8000314:	4314      	orrs	r4, r2
 8000316:	469b      	mov	fp, r3
 8000318:	00c2      	lsls	r2, r0, #3
 800031a:	2000      	movs	r0, #0
 800031c:	0033      	movs	r3, r6
 800031e:	407b      	eors	r3, r7
 8000320:	469a      	mov	sl, r3
 8000322:	464b      	mov	r3, r9
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d827      	bhi.n	8000378 <__aeabi_ddiv+0xdc>
 8000328:	49bc      	ldr	r1, [pc, #752]	; (800061c <__aeabi_ddiv+0x380>)
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	58cb      	ldr	r3, [r1, r3]
 800032e:	469f      	mov	pc, r3
 8000330:	46b2      	mov	sl, r6
 8000332:	9b00      	ldr	r3, [sp, #0]
 8000334:	2b02      	cmp	r3, #2
 8000336:	d016      	beq.n	8000366 <__aeabi_ddiv+0xca>
 8000338:	2b03      	cmp	r3, #3
 800033a:	d100      	bne.n	800033e <__aeabi_ddiv+0xa2>
 800033c:	e28e      	b.n	800085c <__aeabi_ddiv+0x5c0>
 800033e:	2b01      	cmp	r3, #1
 8000340:	d000      	beq.n	8000344 <__aeabi_ddiv+0xa8>
 8000342:	e0d9      	b.n	80004f8 <__aeabi_ddiv+0x25c>
 8000344:	2300      	movs	r3, #0
 8000346:	2400      	movs	r4, #0
 8000348:	2500      	movs	r5, #0
 800034a:	4652      	mov	r2, sl
 800034c:	051b      	lsls	r3, r3, #20
 800034e:	4323      	orrs	r3, r4
 8000350:	07d2      	lsls	r2, r2, #31
 8000352:	4313      	orrs	r3, r2
 8000354:	0028      	movs	r0, r5
 8000356:	0019      	movs	r1, r3
 8000358:	b005      	add	sp, #20
 800035a:	bcf0      	pop	{r4, r5, r6, r7}
 800035c:	46bb      	mov	fp, r7
 800035e:	46b2      	mov	sl, r6
 8000360:	46a9      	mov	r9, r5
 8000362:	46a0      	mov	r8, r4
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	2400      	movs	r4, #0
 8000368:	2500      	movs	r5, #0
 800036a:	4baa      	ldr	r3, [pc, #680]	; (8000614 <__aeabi_ddiv+0x378>)
 800036c:	e7ed      	b.n	800034a <__aeabi_ddiv+0xae>
 800036e:	46ba      	mov	sl, r7
 8000370:	46a0      	mov	r8, r4
 8000372:	0015      	movs	r5, r2
 8000374:	9000      	str	r0, [sp, #0]
 8000376:	e7dc      	b.n	8000332 <__aeabi_ddiv+0x96>
 8000378:	4544      	cmp	r4, r8
 800037a:	d200      	bcs.n	800037e <__aeabi_ddiv+0xe2>
 800037c:	e1c7      	b.n	800070e <__aeabi_ddiv+0x472>
 800037e:	d100      	bne.n	8000382 <__aeabi_ddiv+0xe6>
 8000380:	e1c2      	b.n	8000708 <__aeabi_ddiv+0x46c>
 8000382:	2301      	movs	r3, #1
 8000384:	425b      	negs	r3, r3
 8000386:	469c      	mov	ip, r3
 8000388:	002e      	movs	r6, r5
 800038a:	4640      	mov	r0, r8
 800038c:	2500      	movs	r5, #0
 800038e:	44e3      	add	fp, ip
 8000390:	0223      	lsls	r3, r4, #8
 8000392:	0e14      	lsrs	r4, r2, #24
 8000394:	431c      	orrs	r4, r3
 8000396:	0c1b      	lsrs	r3, r3, #16
 8000398:	4699      	mov	r9, r3
 800039a:	0423      	lsls	r3, r4, #16
 800039c:	0c1f      	lsrs	r7, r3, #16
 800039e:	0212      	lsls	r2, r2, #8
 80003a0:	4649      	mov	r1, r9
 80003a2:	9200      	str	r2, [sp, #0]
 80003a4:	9701      	str	r7, [sp, #4]
 80003a6:	f7ff ff35 	bl	8000214 <__aeabi_uidivmod>
 80003aa:	0002      	movs	r2, r0
 80003ac:	437a      	muls	r2, r7
 80003ae:	040b      	lsls	r3, r1, #16
 80003b0:	0c31      	lsrs	r1, r6, #16
 80003b2:	4680      	mov	r8, r0
 80003b4:	4319      	orrs	r1, r3
 80003b6:	428a      	cmp	r2, r1
 80003b8:	d907      	bls.n	80003ca <__aeabi_ddiv+0x12e>
 80003ba:	2301      	movs	r3, #1
 80003bc:	425b      	negs	r3, r3
 80003be:	469c      	mov	ip, r3
 80003c0:	1909      	adds	r1, r1, r4
 80003c2:	44e0      	add	r8, ip
 80003c4:	428c      	cmp	r4, r1
 80003c6:	d800      	bhi.n	80003ca <__aeabi_ddiv+0x12e>
 80003c8:	e207      	b.n	80007da <__aeabi_ddiv+0x53e>
 80003ca:	1a88      	subs	r0, r1, r2
 80003cc:	4649      	mov	r1, r9
 80003ce:	f7ff ff21 	bl	8000214 <__aeabi_uidivmod>
 80003d2:	0409      	lsls	r1, r1, #16
 80003d4:	468c      	mov	ip, r1
 80003d6:	0431      	lsls	r1, r6, #16
 80003d8:	4666      	mov	r6, ip
 80003da:	9a01      	ldr	r2, [sp, #4]
 80003dc:	0c09      	lsrs	r1, r1, #16
 80003de:	4342      	muls	r2, r0
 80003e0:	0003      	movs	r3, r0
 80003e2:	4331      	orrs	r1, r6
 80003e4:	428a      	cmp	r2, r1
 80003e6:	d904      	bls.n	80003f2 <__aeabi_ddiv+0x156>
 80003e8:	1909      	adds	r1, r1, r4
 80003ea:	3b01      	subs	r3, #1
 80003ec:	428c      	cmp	r4, r1
 80003ee:	d800      	bhi.n	80003f2 <__aeabi_ddiv+0x156>
 80003f0:	e1ed      	b.n	80007ce <__aeabi_ddiv+0x532>
 80003f2:	1a88      	subs	r0, r1, r2
 80003f4:	4642      	mov	r2, r8
 80003f6:	0412      	lsls	r2, r2, #16
 80003f8:	431a      	orrs	r2, r3
 80003fa:	4690      	mov	r8, r2
 80003fc:	4641      	mov	r1, r8
 80003fe:	9b00      	ldr	r3, [sp, #0]
 8000400:	040e      	lsls	r6, r1, #16
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	001f      	movs	r7, r3
 8000406:	9302      	str	r3, [sp, #8]
 8000408:	9b00      	ldr	r3, [sp, #0]
 800040a:	0c36      	lsrs	r6, r6, #16
 800040c:	041b      	lsls	r3, r3, #16
 800040e:	0c19      	lsrs	r1, r3, #16
 8000410:	000b      	movs	r3, r1
 8000412:	4373      	muls	r3, r6
 8000414:	0c12      	lsrs	r2, r2, #16
 8000416:	437e      	muls	r6, r7
 8000418:	9103      	str	r1, [sp, #12]
 800041a:	4351      	muls	r1, r2
 800041c:	437a      	muls	r2, r7
 800041e:	0c1f      	lsrs	r7, r3, #16
 8000420:	46bc      	mov	ip, r7
 8000422:	1876      	adds	r6, r6, r1
 8000424:	4466      	add	r6, ip
 8000426:	42b1      	cmp	r1, r6
 8000428:	d903      	bls.n	8000432 <__aeabi_ddiv+0x196>
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0249      	lsls	r1, r1, #9
 800042e:	468c      	mov	ip, r1
 8000430:	4462      	add	r2, ip
 8000432:	0c31      	lsrs	r1, r6, #16
 8000434:	188a      	adds	r2, r1, r2
 8000436:	0431      	lsls	r1, r6, #16
 8000438:	041e      	lsls	r6, r3, #16
 800043a:	0c36      	lsrs	r6, r6, #16
 800043c:	198e      	adds	r6, r1, r6
 800043e:	4290      	cmp	r0, r2
 8000440:	d302      	bcc.n	8000448 <__aeabi_ddiv+0x1ac>
 8000442:	d112      	bne.n	800046a <__aeabi_ddiv+0x1ce>
 8000444:	42b5      	cmp	r5, r6
 8000446:	d210      	bcs.n	800046a <__aeabi_ddiv+0x1ce>
 8000448:	4643      	mov	r3, r8
 800044a:	1e59      	subs	r1, r3, #1
 800044c:	9b00      	ldr	r3, [sp, #0]
 800044e:	469c      	mov	ip, r3
 8000450:	4465      	add	r5, ip
 8000452:	001f      	movs	r7, r3
 8000454:	429d      	cmp	r5, r3
 8000456:	419b      	sbcs	r3, r3
 8000458:	425b      	negs	r3, r3
 800045a:	191b      	adds	r3, r3, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	4284      	cmp	r4, r0
 8000460:	d200      	bcs.n	8000464 <__aeabi_ddiv+0x1c8>
 8000462:	e1a0      	b.n	80007a6 <__aeabi_ddiv+0x50a>
 8000464:	d100      	bne.n	8000468 <__aeabi_ddiv+0x1cc>
 8000466:	e19b      	b.n	80007a0 <__aeabi_ddiv+0x504>
 8000468:	4688      	mov	r8, r1
 800046a:	1bae      	subs	r6, r5, r6
 800046c:	42b5      	cmp	r5, r6
 800046e:	41ad      	sbcs	r5, r5
 8000470:	1a80      	subs	r0, r0, r2
 8000472:	426d      	negs	r5, r5
 8000474:	1b40      	subs	r0, r0, r5
 8000476:	4284      	cmp	r4, r0
 8000478:	d100      	bne.n	800047c <__aeabi_ddiv+0x1e0>
 800047a:	e1d5      	b.n	8000828 <__aeabi_ddiv+0x58c>
 800047c:	4649      	mov	r1, r9
 800047e:	f7ff fec9 	bl	8000214 <__aeabi_uidivmod>
 8000482:	9a01      	ldr	r2, [sp, #4]
 8000484:	040b      	lsls	r3, r1, #16
 8000486:	4342      	muls	r2, r0
 8000488:	0c31      	lsrs	r1, r6, #16
 800048a:	0005      	movs	r5, r0
 800048c:	4319      	orrs	r1, r3
 800048e:	428a      	cmp	r2, r1
 8000490:	d900      	bls.n	8000494 <__aeabi_ddiv+0x1f8>
 8000492:	e16c      	b.n	800076e <__aeabi_ddiv+0x4d2>
 8000494:	1a88      	subs	r0, r1, r2
 8000496:	4649      	mov	r1, r9
 8000498:	f7ff febc 	bl	8000214 <__aeabi_uidivmod>
 800049c:	9a01      	ldr	r2, [sp, #4]
 800049e:	0436      	lsls	r6, r6, #16
 80004a0:	4342      	muls	r2, r0
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	0c36      	lsrs	r6, r6, #16
 80004a6:	0003      	movs	r3, r0
 80004a8:	430e      	orrs	r6, r1
 80004aa:	42b2      	cmp	r2, r6
 80004ac:	d900      	bls.n	80004b0 <__aeabi_ddiv+0x214>
 80004ae:	e153      	b.n	8000758 <__aeabi_ddiv+0x4bc>
 80004b0:	9803      	ldr	r0, [sp, #12]
 80004b2:	1ab6      	subs	r6, r6, r2
 80004b4:	0002      	movs	r2, r0
 80004b6:	042d      	lsls	r5, r5, #16
 80004b8:	431d      	orrs	r5, r3
 80004ba:	9f02      	ldr	r7, [sp, #8]
 80004bc:	042b      	lsls	r3, r5, #16
 80004be:	0c1b      	lsrs	r3, r3, #16
 80004c0:	435a      	muls	r2, r3
 80004c2:	437b      	muls	r3, r7
 80004c4:	469c      	mov	ip, r3
 80004c6:	0c29      	lsrs	r1, r5, #16
 80004c8:	4348      	muls	r0, r1
 80004ca:	0c13      	lsrs	r3, r2, #16
 80004cc:	4484      	add	ip, r0
 80004ce:	4463      	add	r3, ip
 80004d0:	4379      	muls	r1, r7
 80004d2:	4298      	cmp	r0, r3
 80004d4:	d903      	bls.n	80004de <__aeabi_ddiv+0x242>
 80004d6:	2080      	movs	r0, #128	; 0x80
 80004d8:	0240      	lsls	r0, r0, #9
 80004da:	4684      	mov	ip, r0
 80004dc:	4461      	add	r1, ip
 80004de:	0c18      	lsrs	r0, r3, #16
 80004e0:	0412      	lsls	r2, r2, #16
 80004e2:	041b      	lsls	r3, r3, #16
 80004e4:	0c12      	lsrs	r2, r2, #16
 80004e6:	1841      	adds	r1, r0, r1
 80004e8:	189b      	adds	r3, r3, r2
 80004ea:	428e      	cmp	r6, r1
 80004ec:	d200      	bcs.n	80004f0 <__aeabi_ddiv+0x254>
 80004ee:	e0ff      	b.n	80006f0 <__aeabi_ddiv+0x454>
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x258>
 80004f2:	e0fa      	b.n	80006ea <__aeabi_ddiv+0x44e>
 80004f4:	2301      	movs	r3, #1
 80004f6:	431d      	orrs	r5, r3
 80004f8:	4a49      	ldr	r2, [pc, #292]	; (8000620 <__aeabi_ddiv+0x384>)
 80004fa:	445a      	add	r2, fp
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_ddiv+0x266>
 8000500:	e0aa      	b.n	8000658 <__aeabi_ddiv+0x3bc>
 8000502:	076b      	lsls	r3, r5, #29
 8000504:	d000      	beq.n	8000508 <__aeabi_ddiv+0x26c>
 8000506:	e13d      	b.n	8000784 <__aeabi_ddiv+0x4e8>
 8000508:	08ed      	lsrs	r5, r5, #3
 800050a:	4643      	mov	r3, r8
 800050c:	01db      	lsls	r3, r3, #7
 800050e:	d506      	bpl.n	800051e <__aeabi_ddiv+0x282>
 8000510:	4642      	mov	r2, r8
 8000512:	4b44      	ldr	r3, [pc, #272]	; (8000624 <__aeabi_ddiv+0x388>)
 8000514:	401a      	ands	r2, r3
 8000516:	4690      	mov	r8, r2
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	445a      	add	r2, fp
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <__aeabi_ddiv+0x38c>)
 8000520:	429a      	cmp	r2, r3
 8000522:	dd00      	ble.n	8000526 <__aeabi_ddiv+0x28a>
 8000524:	e71f      	b.n	8000366 <__aeabi_ddiv+0xca>
 8000526:	4643      	mov	r3, r8
 8000528:	075b      	lsls	r3, r3, #29
 800052a:	431d      	orrs	r5, r3
 800052c:	4643      	mov	r3, r8
 800052e:	0552      	lsls	r2, r2, #21
 8000530:	025c      	lsls	r4, r3, #9
 8000532:	0b24      	lsrs	r4, r4, #12
 8000534:	0d53      	lsrs	r3, r2, #21
 8000536:	e708      	b.n	800034a <__aeabi_ddiv+0xae>
 8000538:	4652      	mov	r2, sl
 800053a:	4322      	orrs	r2, r4
 800053c:	d100      	bne.n	8000540 <__aeabi_ddiv+0x2a4>
 800053e:	e07b      	b.n	8000638 <__aeabi_ddiv+0x39c>
 8000540:	2c00      	cmp	r4, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_ddiv+0x2aa>
 8000544:	e0fa      	b.n	800073c <__aeabi_ddiv+0x4a0>
 8000546:	0020      	movs	r0, r4
 8000548:	f000 fe0c 	bl	8001164 <__clzsi2>
 800054c:	0002      	movs	r2, r0
 800054e:	3a0b      	subs	r2, #11
 8000550:	231d      	movs	r3, #29
 8000552:	0001      	movs	r1, r0
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	4652      	mov	r2, sl
 8000558:	3908      	subs	r1, #8
 800055a:	40da      	lsrs	r2, r3
 800055c:	408c      	lsls	r4, r1
 800055e:	4314      	orrs	r4, r2
 8000560:	4652      	mov	r2, sl
 8000562:	408a      	lsls	r2, r1
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <__aeabi_ddiv+0x390>)
 8000566:	4458      	add	r0, fp
 8000568:	469b      	mov	fp, r3
 800056a:	4483      	add	fp, r0
 800056c:	2000      	movs	r0, #0
 800056e:	e6d5      	b.n	800031c <__aeabi_ddiv+0x80>
 8000570:	464b      	mov	r3, r9
 8000572:	4323      	orrs	r3, r4
 8000574:	4698      	mov	r8, r3
 8000576:	d044      	beq.n	8000602 <__aeabi_ddiv+0x366>
 8000578:	2c00      	cmp	r4, #0
 800057a:	d100      	bne.n	800057e <__aeabi_ddiv+0x2e2>
 800057c:	e0ce      	b.n	800071c <__aeabi_ddiv+0x480>
 800057e:	0020      	movs	r0, r4
 8000580:	f000 fdf0 	bl	8001164 <__clzsi2>
 8000584:	0001      	movs	r1, r0
 8000586:	0002      	movs	r2, r0
 8000588:	390b      	subs	r1, #11
 800058a:	231d      	movs	r3, #29
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	4649      	mov	r1, r9
 8000590:	0010      	movs	r0, r2
 8000592:	40d9      	lsrs	r1, r3
 8000594:	3808      	subs	r0, #8
 8000596:	4084      	lsls	r4, r0
 8000598:	000b      	movs	r3, r1
 800059a:	464d      	mov	r5, r9
 800059c:	4323      	orrs	r3, r4
 800059e:	4698      	mov	r8, r3
 80005a0:	4085      	lsls	r5, r0
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <__aeabi_ddiv+0x394>)
 80005a4:	1a83      	subs	r3, r0, r2
 80005a6:	469b      	mov	fp, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	4699      	mov	r9, r3
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e69a      	b.n	80002e6 <__aeabi_ddiv+0x4a>
 80005b0:	464b      	mov	r3, r9
 80005b2:	4323      	orrs	r3, r4
 80005b4:	4698      	mov	r8, r3
 80005b6:	d11d      	bne.n	80005f4 <__aeabi_ddiv+0x358>
 80005b8:	2308      	movs	r3, #8
 80005ba:	4699      	mov	r9, r3
 80005bc:	3b06      	subs	r3, #6
 80005be:	2500      	movs	r5, #0
 80005c0:	4683      	mov	fp, r0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	e68f      	b.n	80002e6 <__aeabi_ddiv+0x4a>
 80005c6:	4652      	mov	r2, sl
 80005c8:	4322      	orrs	r2, r4
 80005ca:	d109      	bne.n	80005e0 <__aeabi_ddiv+0x344>
 80005cc:	2302      	movs	r3, #2
 80005ce:	4649      	mov	r1, r9
 80005d0:	4319      	orrs	r1, r3
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <__aeabi_ddiv+0x398>)
 80005d4:	4689      	mov	r9, r1
 80005d6:	469c      	mov	ip, r3
 80005d8:	2400      	movs	r4, #0
 80005da:	2002      	movs	r0, #2
 80005dc:	44e3      	add	fp, ip
 80005de:	e69d      	b.n	800031c <__aeabi_ddiv+0x80>
 80005e0:	2303      	movs	r3, #3
 80005e2:	464a      	mov	r2, r9
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <__aeabi_ddiv+0x398>)
 80005e8:	4691      	mov	r9, r2
 80005ea:	469c      	mov	ip, r3
 80005ec:	4652      	mov	r2, sl
 80005ee:	2003      	movs	r0, #3
 80005f0:	44e3      	add	fp, ip
 80005f2:	e693      	b.n	800031c <__aeabi_ddiv+0x80>
 80005f4:	230c      	movs	r3, #12
 80005f6:	4699      	mov	r9, r3
 80005f8:	3b09      	subs	r3, #9
 80005fa:	46a0      	mov	r8, r4
 80005fc:	4683      	mov	fp, r0
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	e671      	b.n	80002e6 <__aeabi_ddiv+0x4a>
 8000602:	2304      	movs	r3, #4
 8000604:	4699      	mov	r9, r3
 8000606:	2300      	movs	r3, #0
 8000608:	469b      	mov	fp, r3
 800060a:	3301      	adds	r3, #1
 800060c:	2500      	movs	r5, #0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	e669      	b.n	80002e6 <__aeabi_ddiv+0x4a>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	000007ff 	.word	0x000007ff
 8000618:	fffffc01 	.word	0xfffffc01
 800061c:	08003f9c 	.word	0x08003f9c
 8000620:	000003ff 	.word	0x000003ff
 8000624:	feffffff 	.word	0xfeffffff
 8000628:	000007fe 	.word	0x000007fe
 800062c:	000003f3 	.word	0x000003f3
 8000630:	fffffc0d 	.word	0xfffffc0d
 8000634:	fffff801 	.word	0xfffff801
 8000638:	4649      	mov	r1, r9
 800063a:	2301      	movs	r3, #1
 800063c:	4319      	orrs	r1, r3
 800063e:	4689      	mov	r9, r1
 8000640:	2400      	movs	r4, #0
 8000642:	2001      	movs	r0, #1
 8000644:	e66a      	b.n	800031c <__aeabi_ddiv+0x80>
 8000646:	2300      	movs	r3, #0
 8000648:	2480      	movs	r4, #128	; 0x80
 800064a:	469a      	mov	sl, r3
 800064c:	2500      	movs	r5, #0
 800064e:	4b8a      	ldr	r3, [pc, #552]	; (8000878 <__aeabi_ddiv+0x5dc>)
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	e67a      	b.n	800034a <__aeabi_ddiv+0xae>
 8000654:	2501      	movs	r5, #1
 8000656:	426d      	negs	r5, r5
 8000658:	2301      	movs	r3, #1
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	2b38      	cmp	r3, #56	; 0x38
 800065e:	dd00      	ble.n	8000662 <__aeabi_ddiv+0x3c6>
 8000660:	e670      	b.n	8000344 <__aeabi_ddiv+0xa8>
 8000662:	2b1f      	cmp	r3, #31
 8000664:	dc00      	bgt.n	8000668 <__aeabi_ddiv+0x3cc>
 8000666:	e0bf      	b.n	80007e8 <__aeabi_ddiv+0x54c>
 8000668:	211f      	movs	r1, #31
 800066a:	4249      	negs	r1, r1
 800066c:	1a8a      	subs	r2, r1, r2
 800066e:	4641      	mov	r1, r8
 8000670:	40d1      	lsrs	r1, r2
 8000672:	000a      	movs	r2, r1
 8000674:	2b20      	cmp	r3, #32
 8000676:	d004      	beq.n	8000682 <__aeabi_ddiv+0x3e6>
 8000678:	4641      	mov	r1, r8
 800067a:	4b80      	ldr	r3, [pc, #512]	; (800087c <__aeabi_ddiv+0x5e0>)
 800067c:	445b      	add	r3, fp
 800067e:	4099      	lsls	r1, r3
 8000680:	430d      	orrs	r5, r1
 8000682:	1e6b      	subs	r3, r5, #1
 8000684:	419d      	sbcs	r5, r3
 8000686:	2307      	movs	r3, #7
 8000688:	432a      	orrs	r2, r5
 800068a:	001d      	movs	r5, r3
 800068c:	2400      	movs	r4, #0
 800068e:	4015      	ands	r5, r2
 8000690:	4213      	tst	r3, r2
 8000692:	d100      	bne.n	8000696 <__aeabi_ddiv+0x3fa>
 8000694:	e0d4      	b.n	8000840 <__aeabi_ddiv+0x5a4>
 8000696:	210f      	movs	r1, #15
 8000698:	2300      	movs	r3, #0
 800069a:	4011      	ands	r1, r2
 800069c:	2904      	cmp	r1, #4
 800069e:	d100      	bne.n	80006a2 <__aeabi_ddiv+0x406>
 80006a0:	e0cb      	b.n	800083a <__aeabi_ddiv+0x59e>
 80006a2:	1d11      	adds	r1, r2, #4
 80006a4:	4291      	cmp	r1, r2
 80006a6:	4192      	sbcs	r2, r2
 80006a8:	4252      	negs	r2, r2
 80006aa:	189b      	adds	r3, r3, r2
 80006ac:	000a      	movs	r2, r1
 80006ae:	0219      	lsls	r1, r3, #8
 80006b0:	d400      	bmi.n	80006b4 <__aeabi_ddiv+0x418>
 80006b2:	e0c2      	b.n	800083a <__aeabi_ddiv+0x59e>
 80006b4:	2301      	movs	r3, #1
 80006b6:	2400      	movs	r4, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	e646      	b.n	800034a <__aeabi_ddiv+0xae>
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	4641      	mov	r1, r8
 80006c0:	031b      	lsls	r3, r3, #12
 80006c2:	4219      	tst	r1, r3
 80006c4:	d008      	beq.n	80006d8 <__aeabi_ddiv+0x43c>
 80006c6:	421c      	tst	r4, r3
 80006c8:	d106      	bne.n	80006d8 <__aeabi_ddiv+0x43c>
 80006ca:	431c      	orrs	r4, r3
 80006cc:	0324      	lsls	r4, r4, #12
 80006ce:	46ba      	mov	sl, r7
 80006d0:	0015      	movs	r5, r2
 80006d2:	4b69      	ldr	r3, [pc, #420]	; (8000878 <__aeabi_ddiv+0x5dc>)
 80006d4:	0b24      	lsrs	r4, r4, #12
 80006d6:	e638      	b.n	800034a <__aeabi_ddiv+0xae>
 80006d8:	2480      	movs	r4, #128	; 0x80
 80006da:	4643      	mov	r3, r8
 80006dc:	0324      	lsls	r4, r4, #12
 80006de:	431c      	orrs	r4, r3
 80006e0:	0324      	lsls	r4, r4, #12
 80006e2:	46b2      	mov	sl, r6
 80006e4:	4b64      	ldr	r3, [pc, #400]	; (8000878 <__aeabi_ddiv+0x5dc>)
 80006e6:	0b24      	lsrs	r4, r4, #12
 80006e8:	e62f      	b.n	800034a <__aeabi_ddiv+0xae>
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_ddiv+0x454>
 80006ee:	e703      	b.n	80004f8 <__aeabi_ddiv+0x25c>
 80006f0:	19a6      	adds	r6, r4, r6
 80006f2:	1e68      	subs	r0, r5, #1
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d200      	bcs.n	80006fa <__aeabi_ddiv+0x45e>
 80006f8:	e08d      	b.n	8000816 <__aeabi_ddiv+0x57a>
 80006fa:	428e      	cmp	r6, r1
 80006fc:	d200      	bcs.n	8000700 <__aeabi_ddiv+0x464>
 80006fe:	e0a3      	b.n	8000848 <__aeabi_ddiv+0x5ac>
 8000700:	d100      	bne.n	8000704 <__aeabi_ddiv+0x468>
 8000702:	e0b3      	b.n	800086c <__aeabi_ddiv+0x5d0>
 8000704:	0005      	movs	r5, r0
 8000706:	e6f5      	b.n	80004f4 <__aeabi_ddiv+0x258>
 8000708:	42aa      	cmp	r2, r5
 800070a:	d900      	bls.n	800070e <__aeabi_ddiv+0x472>
 800070c:	e639      	b.n	8000382 <__aeabi_ddiv+0xe6>
 800070e:	4643      	mov	r3, r8
 8000710:	07de      	lsls	r6, r3, #31
 8000712:	0858      	lsrs	r0, r3, #1
 8000714:	086b      	lsrs	r3, r5, #1
 8000716:	431e      	orrs	r6, r3
 8000718:	07ed      	lsls	r5, r5, #31
 800071a:	e639      	b.n	8000390 <__aeabi_ddiv+0xf4>
 800071c:	4648      	mov	r0, r9
 800071e:	f000 fd21 	bl	8001164 <__clzsi2>
 8000722:	0001      	movs	r1, r0
 8000724:	0002      	movs	r2, r0
 8000726:	3115      	adds	r1, #21
 8000728:	3220      	adds	r2, #32
 800072a:	291c      	cmp	r1, #28
 800072c:	dc00      	bgt.n	8000730 <__aeabi_ddiv+0x494>
 800072e:	e72c      	b.n	800058a <__aeabi_ddiv+0x2ee>
 8000730:	464b      	mov	r3, r9
 8000732:	3808      	subs	r0, #8
 8000734:	4083      	lsls	r3, r0
 8000736:	2500      	movs	r5, #0
 8000738:	4698      	mov	r8, r3
 800073a:	e732      	b.n	80005a2 <__aeabi_ddiv+0x306>
 800073c:	f000 fd12 	bl	8001164 <__clzsi2>
 8000740:	0003      	movs	r3, r0
 8000742:	001a      	movs	r2, r3
 8000744:	3215      	adds	r2, #21
 8000746:	3020      	adds	r0, #32
 8000748:	2a1c      	cmp	r2, #28
 800074a:	dc00      	bgt.n	800074e <__aeabi_ddiv+0x4b2>
 800074c:	e700      	b.n	8000550 <__aeabi_ddiv+0x2b4>
 800074e:	4654      	mov	r4, sl
 8000750:	3b08      	subs	r3, #8
 8000752:	2200      	movs	r2, #0
 8000754:	409c      	lsls	r4, r3
 8000756:	e705      	b.n	8000564 <__aeabi_ddiv+0x2c8>
 8000758:	1936      	adds	r6, r6, r4
 800075a:	3b01      	subs	r3, #1
 800075c:	42b4      	cmp	r4, r6
 800075e:	d900      	bls.n	8000762 <__aeabi_ddiv+0x4c6>
 8000760:	e6a6      	b.n	80004b0 <__aeabi_ddiv+0x214>
 8000762:	42b2      	cmp	r2, r6
 8000764:	d800      	bhi.n	8000768 <__aeabi_ddiv+0x4cc>
 8000766:	e6a3      	b.n	80004b0 <__aeabi_ddiv+0x214>
 8000768:	1e83      	subs	r3, r0, #2
 800076a:	1936      	adds	r6, r6, r4
 800076c:	e6a0      	b.n	80004b0 <__aeabi_ddiv+0x214>
 800076e:	1909      	adds	r1, r1, r4
 8000770:	3d01      	subs	r5, #1
 8000772:	428c      	cmp	r4, r1
 8000774:	d900      	bls.n	8000778 <__aeabi_ddiv+0x4dc>
 8000776:	e68d      	b.n	8000494 <__aeabi_ddiv+0x1f8>
 8000778:	428a      	cmp	r2, r1
 800077a:	d800      	bhi.n	800077e <__aeabi_ddiv+0x4e2>
 800077c:	e68a      	b.n	8000494 <__aeabi_ddiv+0x1f8>
 800077e:	1e85      	subs	r5, r0, #2
 8000780:	1909      	adds	r1, r1, r4
 8000782:	e687      	b.n	8000494 <__aeabi_ddiv+0x1f8>
 8000784:	230f      	movs	r3, #15
 8000786:	402b      	ands	r3, r5
 8000788:	2b04      	cmp	r3, #4
 800078a:	d100      	bne.n	800078e <__aeabi_ddiv+0x4f2>
 800078c:	e6bc      	b.n	8000508 <__aeabi_ddiv+0x26c>
 800078e:	2305      	movs	r3, #5
 8000790:	425b      	negs	r3, r3
 8000792:	42ab      	cmp	r3, r5
 8000794:	419b      	sbcs	r3, r3
 8000796:	3504      	adds	r5, #4
 8000798:	425b      	negs	r3, r3
 800079a:	08ed      	lsrs	r5, r5, #3
 800079c:	4498      	add	r8, r3
 800079e:	e6b4      	b.n	800050a <__aeabi_ddiv+0x26e>
 80007a0:	42af      	cmp	r7, r5
 80007a2:	d900      	bls.n	80007a6 <__aeabi_ddiv+0x50a>
 80007a4:	e660      	b.n	8000468 <__aeabi_ddiv+0x1cc>
 80007a6:	4282      	cmp	r2, r0
 80007a8:	d804      	bhi.n	80007b4 <__aeabi_ddiv+0x518>
 80007aa:	d000      	beq.n	80007ae <__aeabi_ddiv+0x512>
 80007ac:	e65c      	b.n	8000468 <__aeabi_ddiv+0x1cc>
 80007ae:	42ae      	cmp	r6, r5
 80007b0:	d800      	bhi.n	80007b4 <__aeabi_ddiv+0x518>
 80007b2:	e659      	b.n	8000468 <__aeabi_ddiv+0x1cc>
 80007b4:	2302      	movs	r3, #2
 80007b6:	425b      	negs	r3, r3
 80007b8:	469c      	mov	ip, r3
 80007ba:	9b00      	ldr	r3, [sp, #0]
 80007bc:	44e0      	add	r8, ip
 80007be:	469c      	mov	ip, r3
 80007c0:	4465      	add	r5, ip
 80007c2:	429d      	cmp	r5, r3
 80007c4:	419b      	sbcs	r3, r3
 80007c6:	425b      	negs	r3, r3
 80007c8:	191b      	adds	r3, r3, r4
 80007ca:	18c0      	adds	r0, r0, r3
 80007cc:	e64d      	b.n	800046a <__aeabi_ddiv+0x1ce>
 80007ce:	428a      	cmp	r2, r1
 80007d0:	d800      	bhi.n	80007d4 <__aeabi_ddiv+0x538>
 80007d2:	e60e      	b.n	80003f2 <__aeabi_ddiv+0x156>
 80007d4:	1e83      	subs	r3, r0, #2
 80007d6:	1909      	adds	r1, r1, r4
 80007d8:	e60b      	b.n	80003f2 <__aeabi_ddiv+0x156>
 80007da:	428a      	cmp	r2, r1
 80007dc:	d800      	bhi.n	80007e0 <__aeabi_ddiv+0x544>
 80007de:	e5f4      	b.n	80003ca <__aeabi_ddiv+0x12e>
 80007e0:	1e83      	subs	r3, r0, #2
 80007e2:	4698      	mov	r8, r3
 80007e4:	1909      	adds	r1, r1, r4
 80007e6:	e5f0      	b.n	80003ca <__aeabi_ddiv+0x12e>
 80007e8:	4925      	ldr	r1, [pc, #148]	; (8000880 <__aeabi_ddiv+0x5e4>)
 80007ea:	0028      	movs	r0, r5
 80007ec:	4459      	add	r1, fp
 80007ee:	408d      	lsls	r5, r1
 80007f0:	4642      	mov	r2, r8
 80007f2:	408a      	lsls	r2, r1
 80007f4:	1e69      	subs	r1, r5, #1
 80007f6:	418d      	sbcs	r5, r1
 80007f8:	4641      	mov	r1, r8
 80007fa:	40d8      	lsrs	r0, r3
 80007fc:	40d9      	lsrs	r1, r3
 80007fe:	4302      	orrs	r2, r0
 8000800:	432a      	orrs	r2, r5
 8000802:	000b      	movs	r3, r1
 8000804:	0751      	lsls	r1, r2, #29
 8000806:	d100      	bne.n	800080a <__aeabi_ddiv+0x56e>
 8000808:	e751      	b.n	80006ae <__aeabi_ddiv+0x412>
 800080a:	210f      	movs	r1, #15
 800080c:	4011      	ands	r1, r2
 800080e:	2904      	cmp	r1, #4
 8000810:	d000      	beq.n	8000814 <__aeabi_ddiv+0x578>
 8000812:	e746      	b.n	80006a2 <__aeabi_ddiv+0x406>
 8000814:	e74b      	b.n	80006ae <__aeabi_ddiv+0x412>
 8000816:	0005      	movs	r5, r0
 8000818:	428e      	cmp	r6, r1
 800081a:	d000      	beq.n	800081e <__aeabi_ddiv+0x582>
 800081c:	e66a      	b.n	80004f4 <__aeabi_ddiv+0x258>
 800081e:	9a00      	ldr	r2, [sp, #0]
 8000820:	4293      	cmp	r3, r2
 8000822:	d000      	beq.n	8000826 <__aeabi_ddiv+0x58a>
 8000824:	e666      	b.n	80004f4 <__aeabi_ddiv+0x258>
 8000826:	e667      	b.n	80004f8 <__aeabi_ddiv+0x25c>
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <__aeabi_ddiv+0x5e8>)
 800082a:	445a      	add	r2, fp
 800082c:	2a00      	cmp	r2, #0
 800082e:	dc00      	bgt.n	8000832 <__aeabi_ddiv+0x596>
 8000830:	e710      	b.n	8000654 <__aeabi_ddiv+0x3b8>
 8000832:	2301      	movs	r3, #1
 8000834:	2500      	movs	r5, #0
 8000836:	4498      	add	r8, r3
 8000838:	e667      	b.n	800050a <__aeabi_ddiv+0x26e>
 800083a:	075d      	lsls	r5, r3, #29
 800083c:	025b      	lsls	r3, r3, #9
 800083e:	0b1c      	lsrs	r4, r3, #12
 8000840:	08d2      	lsrs	r2, r2, #3
 8000842:	2300      	movs	r3, #0
 8000844:	4315      	orrs	r5, r2
 8000846:	e580      	b.n	800034a <__aeabi_ddiv+0xae>
 8000848:	9800      	ldr	r0, [sp, #0]
 800084a:	3d02      	subs	r5, #2
 800084c:	0042      	lsls	r2, r0, #1
 800084e:	4282      	cmp	r2, r0
 8000850:	41bf      	sbcs	r7, r7
 8000852:	427f      	negs	r7, r7
 8000854:	193c      	adds	r4, r7, r4
 8000856:	1936      	adds	r6, r6, r4
 8000858:	9200      	str	r2, [sp, #0]
 800085a:	e7dd      	b.n	8000818 <__aeabi_ddiv+0x57c>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	4643      	mov	r3, r8
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	431c      	orrs	r4, r3
 8000864:	0324      	lsls	r4, r4, #12
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__aeabi_ddiv+0x5dc>)
 8000868:	0b24      	lsrs	r4, r4, #12
 800086a:	e56e      	b.n	800034a <__aeabi_ddiv+0xae>
 800086c:	9a00      	ldr	r2, [sp, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d3ea      	bcc.n	8000848 <__aeabi_ddiv+0x5ac>
 8000872:	0005      	movs	r5, r0
 8000874:	e7d3      	b.n	800081e <__aeabi_ddiv+0x582>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	000007ff 	.word	0x000007ff
 800087c:	0000043e 	.word	0x0000043e
 8000880:	0000041e 	.word	0x0000041e
 8000884:	000003ff 	.word	0x000003ff

08000888 <__eqdf2>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	464e      	mov	r6, r9
 800088c:	4645      	mov	r5, r8
 800088e:	46de      	mov	lr, fp
 8000890:	4657      	mov	r7, sl
 8000892:	4690      	mov	r8, r2
 8000894:	b5e0      	push	{r5, r6, r7, lr}
 8000896:	0017      	movs	r7, r2
 8000898:	031a      	lsls	r2, r3, #12
 800089a:	0b12      	lsrs	r2, r2, #12
 800089c:	0005      	movs	r5, r0
 800089e:	4684      	mov	ip, r0
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <__eqdf2+0x80>)
 80008a2:	030e      	lsls	r6, r1, #12
 80008a4:	004c      	lsls	r4, r1, #1
 80008a6:	4691      	mov	r9, r2
 80008a8:	005a      	lsls	r2, r3, #1
 80008aa:	0fdb      	lsrs	r3, r3, #31
 80008ac:	469b      	mov	fp, r3
 80008ae:	0b36      	lsrs	r6, r6, #12
 80008b0:	0d64      	lsrs	r4, r4, #21
 80008b2:	0fc9      	lsrs	r1, r1, #31
 80008b4:	0d52      	lsrs	r2, r2, #21
 80008b6:	4284      	cmp	r4, r0
 80008b8:	d019      	beq.n	80008ee <__eqdf2+0x66>
 80008ba:	4282      	cmp	r2, r0
 80008bc:	d010      	beq.n	80008e0 <__eqdf2+0x58>
 80008be:	2001      	movs	r0, #1
 80008c0:	4294      	cmp	r4, r2
 80008c2:	d10e      	bne.n	80008e2 <__eqdf2+0x5a>
 80008c4:	454e      	cmp	r6, r9
 80008c6:	d10c      	bne.n	80008e2 <__eqdf2+0x5a>
 80008c8:	2001      	movs	r0, #1
 80008ca:	45c4      	cmp	ip, r8
 80008cc:	d109      	bne.n	80008e2 <__eqdf2+0x5a>
 80008ce:	4559      	cmp	r1, fp
 80008d0:	d017      	beq.n	8000902 <__eqdf2+0x7a>
 80008d2:	2c00      	cmp	r4, #0
 80008d4:	d105      	bne.n	80008e2 <__eqdf2+0x5a>
 80008d6:	0030      	movs	r0, r6
 80008d8:	4328      	orrs	r0, r5
 80008da:	1e43      	subs	r3, r0, #1
 80008dc:	4198      	sbcs	r0, r3
 80008de:	e000      	b.n	80008e2 <__eqdf2+0x5a>
 80008e0:	2001      	movs	r0, #1
 80008e2:	bcf0      	pop	{r4, r5, r6, r7}
 80008e4:	46bb      	mov	fp, r7
 80008e6:	46b2      	mov	sl, r6
 80008e8:	46a9      	mov	r9, r5
 80008ea:	46a0      	mov	r8, r4
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	0033      	movs	r3, r6
 80008f0:	2001      	movs	r0, #1
 80008f2:	432b      	orrs	r3, r5
 80008f4:	d1f5      	bne.n	80008e2 <__eqdf2+0x5a>
 80008f6:	42a2      	cmp	r2, r4
 80008f8:	d1f3      	bne.n	80008e2 <__eqdf2+0x5a>
 80008fa:	464b      	mov	r3, r9
 80008fc:	433b      	orrs	r3, r7
 80008fe:	d1f0      	bne.n	80008e2 <__eqdf2+0x5a>
 8000900:	e7e2      	b.n	80008c8 <__eqdf2+0x40>
 8000902:	2000      	movs	r0, #0
 8000904:	e7ed      	b.n	80008e2 <__eqdf2+0x5a>
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff

0800090c <__gedf2>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	4647      	mov	r7, r8
 8000910:	46ce      	mov	lr, r9
 8000912:	0004      	movs	r4, r0
 8000914:	0018      	movs	r0, r3
 8000916:	0016      	movs	r6, r2
 8000918:	031b      	lsls	r3, r3, #12
 800091a:	0b1b      	lsrs	r3, r3, #12
 800091c:	4d2d      	ldr	r5, [pc, #180]	; (80009d4 <__gedf2+0xc8>)
 800091e:	004a      	lsls	r2, r1, #1
 8000920:	4699      	mov	r9, r3
 8000922:	b580      	push	{r7, lr}
 8000924:	0043      	lsls	r3, r0, #1
 8000926:	030f      	lsls	r7, r1, #12
 8000928:	46a4      	mov	ip, r4
 800092a:	46b0      	mov	r8, r6
 800092c:	0b3f      	lsrs	r7, r7, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0fc9      	lsrs	r1, r1, #31
 8000932:	0d5b      	lsrs	r3, r3, #21
 8000934:	0fc0      	lsrs	r0, r0, #31
 8000936:	42aa      	cmp	r2, r5
 8000938:	d021      	beq.n	800097e <__gedf2+0x72>
 800093a:	42ab      	cmp	r3, r5
 800093c:	d013      	beq.n	8000966 <__gedf2+0x5a>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d122      	bne.n	8000988 <__gedf2+0x7c>
 8000942:	433c      	orrs	r4, r7
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <__gedf2+0x42>
 8000948:	464d      	mov	r5, r9
 800094a:	432e      	orrs	r6, r5
 800094c:	d022      	beq.n	8000994 <__gedf2+0x88>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d010      	beq.n	8000974 <__gedf2+0x68>
 8000952:	4281      	cmp	r1, r0
 8000954:	d022      	beq.n	800099c <__gedf2+0x90>
 8000956:	2002      	movs	r0, #2
 8000958:	3901      	subs	r1, #1
 800095a:	4008      	ands	r0, r1
 800095c:	3801      	subs	r0, #1
 800095e:	bcc0      	pop	{r6, r7}
 8000960:	46b9      	mov	r9, r7
 8000962:	46b0      	mov	r8, r6
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000966:	464d      	mov	r5, r9
 8000968:	432e      	orrs	r6, r5
 800096a:	d129      	bne.n	80009c0 <__gedf2+0xb4>
 800096c:	2a00      	cmp	r2, #0
 800096e:	d1f0      	bne.n	8000952 <__gedf2+0x46>
 8000970:	433c      	orrs	r4, r7
 8000972:	d1ee      	bne.n	8000952 <__gedf2+0x46>
 8000974:	2800      	cmp	r0, #0
 8000976:	d1f2      	bne.n	800095e <__gedf2+0x52>
 8000978:	2001      	movs	r0, #1
 800097a:	4240      	negs	r0, r0
 800097c:	e7ef      	b.n	800095e <__gedf2+0x52>
 800097e:	003d      	movs	r5, r7
 8000980:	4325      	orrs	r5, r4
 8000982:	d11d      	bne.n	80009c0 <__gedf2+0xb4>
 8000984:	4293      	cmp	r3, r2
 8000986:	d0ee      	beq.n	8000966 <__gedf2+0x5a>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e2      	bne.n	8000952 <__gedf2+0x46>
 800098c:	464c      	mov	r4, r9
 800098e:	4326      	orrs	r6, r4
 8000990:	d1df      	bne.n	8000952 <__gedf2+0x46>
 8000992:	e7e0      	b.n	8000956 <__gedf2+0x4a>
 8000994:	2000      	movs	r0, #0
 8000996:	2c00      	cmp	r4, #0
 8000998:	d0e1      	beq.n	800095e <__gedf2+0x52>
 800099a:	e7dc      	b.n	8000956 <__gedf2+0x4a>
 800099c:	429a      	cmp	r2, r3
 800099e:	dc0a      	bgt.n	80009b6 <__gedf2+0xaa>
 80009a0:	dbe8      	blt.n	8000974 <__gedf2+0x68>
 80009a2:	454f      	cmp	r7, r9
 80009a4:	d8d7      	bhi.n	8000956 <__gedf2+0x4a>
 80009a6:	d00e      	beq.n	80009c6 <__gedf2+0xba>
 80009a8:	2000      	movs	r0, #0
 80009aa:	454f      	cmp	r7, r9
 80009ac:	d2d7      	bcs.n	800095e <__gedf2+0x52>
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d0e2      	beq.n	8000978 <__gedf2+0x6c>
 80009b2:	0008      	movs	r0, r1
 80009b4:	e7d3      	b.n	800095e <__gedf2+0x52>
 80009b6:	4243      	negs	r3, r0
 80009b8:	4158      	adcs	r0, r3
 80009ba:	0040      	lsls	r0, r0, #1
 80009bc:	3801      	subs	r0, #1
 80009be:	e7ce      	b.n	800095e <__gedf2+0x52>
 80009c0:	2002      	movs	r0, #2
 80009c2:	4240      	negs	r0, r0
 80009c4:	e7cb      	b.n	800095e <__gedf2+0x52>
 80009c6:	45c4      	cmp	ip, r8
 80009c8:	d8c5      	bhi.n	8000956 <__gedf2+0x4a>
 80009ca:	2000      	movs	r0, #0
 80009cc:	45c4      	cmp	ip, r8
 80009ce:	d2c6      	bcs.n	800095e <__gedf2+0x52>
 80009d0:	e7ed      	b.n	80009ae <__gedf2+0xa2>
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	000007ff 	.word	0x000007ff

080009d8 <__ledf2>:
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	4647      	mov	r7, r8
 80009dc:	46ce      	mov	lr, r9
 80009de:	0004      	movs	r4, r0
 80009e0:	0018      	movs	r0, r3
 80009e2:	0016      	movs	r6, r2
 80009e4:	031b      	lsls	r3, r3, #12
 80009e6:	0b1b      	lsrs	r3, r3, #12
 80009e8:	4d2c      	ldr	r5, [pc, #176]	; (8000a9c <__ledf2+0xc4>)
 80009ea:	004a      	lsls	r2, r1, #1
 80009ec:	4699      	mov	r9, r3
 80009ee:	b580      	push	{r7, lr}
 80009f0:	0043      	lsls	r3, r0, #1
 80009f2:	030f      	lsls	r7, r1, #12
 80009f4:	46a4      	mov	ip, r4
 80009f6:	46b0      	mov	r8, r6
 80009f8:	0b3f      	lsrs	r7, r7, #12
 80009fa:	0d52      	lsrs	r2, r2, #21
 80009fc:	0fc9      	lsrs	r1, r1, #31
 80009fe:	0d5b      	lsrs	r3, r3, #21
 8000a00:	0fc0      	lsrs	r0, r0, #31
 8000a02:	42aa      	cmp	r2, r5
 8000a04:	d00d      	beq.n	8000a22 <__ledf2+0x4a>
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	d010      	beq.n	8000a2c <__ledf2+0x54>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d127      	bne.n	8000a5e <__ledf2+0x86>
 8000a0e:	433c      	orrs	r4, r7
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <__ledf2+0x60>
 8000a14:	464d      	mov	r5, r9
 8000a16:	432e      	orrs	r6, r5
 8000a18:	d10e      	bne.n	8000a38 <__ledf2+0x60>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d015      	beq.n	8000a4c <__ledf2+0x74>
 8000a20:	e00e      	b.n	8000a40 <__ledf2+0x68>
 8000a22:	003d      	movs	r5, r7
 8000a24:	4325      	orrs	r5, r4
 8000a26:	d110      	bne.n	8000a4a <__ledf2+0x72>
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d118      	bne.n	8000a5e <__ledf2+0x86>
 8000a2c:	464d      	mov	r5, r9
 8000a2e:	432e      	orrs	r6, r5
 8000a30:	d10b      	bne.n	8000a4a <__ledf2+0x72>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d102      	bne.n	8000a3c <__ledf2+0x64>
 8000a36:	433c      	orrs	r4, r7
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d00b      	beq.n	8000a54 <__ledf2+0x7c>
 8000a3c:	4281      	cmp	r1, r0
 8000a3e:	d014      	beq.n	8000a6a <__ledf2+0x92>
 8000a40:	2002      	movs	r0, #2
 8000a42:	3901      	subs	r1, #1
 8000a44:	4008      	ands	r0, r1
 8000a46:	3801      	subs	r0, #1
 8000a48:	e000      	b.n	8000a4c <__ledf2+0x74>
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	bcc0      	pop	{r6, r7}
 8000a4e:	46b9      	mov	r9, r7
 8000a50:	46b0      	mov	r8, r6
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d1f9      	bne.n	8000a4c <__ledf2+0x74>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	e7f6      	b.n	8000a4c <__ledf2+0x74>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1ec      	bne.n	8000a3c <__ledf2+0x64>
 8000a62:	464c      	mov	r4, r9
 8000a64:	4326      	orrs	r6, r4
 8000a66:	d1e9      	bne.n	8000a3c <__ledf2+0x64>
 8000a68:	e7ea      	b.n	8000a40 <__ledf2+0x68>
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dd04      	ble.n	8000a78 <__ledf2+0xa0>
 8000a6e:	4243      	negs	r3, r0
 8000a70:	4158      	adcs	r0, r3
 8000a72:	0040      	lsls	r0, r0, #1
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7e9      	b.n	8000a4c <__ledf2+0x74>
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbeb      	blt.n	8000a54 <__ledf2+0x7c>
 8000a7c:	454f      	cmp	r7, r9
 8000a7e:	d8df      	bhi.n	8000a40 <__ledf2+0x68>
 8000a80:	d006      	beq.n	8000a90 <__ledf2+0xb8>
 8000a82:	2000      	movs	r0, #0
 8000a84:	454f      	cmp	r7, r9
 8000a86:	d2e1      	bcs.n	8000a4c <__ledf2+0x74>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	d0e5      	beq.n	8000a58 <__ledf2+0x80>
 8000a8c:	0008      	movs	r0, r1
 8000a8e:	e7dd      	b.n	8000a4c <__ledf2+0x74>
 8000a90:	45c4      	cmp	ip, r8
 8000a92:	d8d5      	bhi.n	8000a40 <__ledf2+0x68>
 8000a94:	2000      	movs	r0, #0
 8000a96:	45c4      	cmp	ip, r8
 8000a98:	d2d8      	bcs.n	8000a4c <__ledf2+0x74>
 8000a9a:	e7f5      	b.n	8000a88 <__ledf2+0xb0>
 8000a9c:	000007ff 	.word	0x000007ff

08000aa0 <__aeabi_dmul>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	4657      	mov	r7, sl
 8000aa4:	464e      	mov	r6, r9
 8000aa6:	4645      	mov	r5, r8
 8000aa8:	46de      	mov	lr, fp
 8000aaa:	b5e0      	push	{r5, r6, r7, lr}
 8000aac:	4698      	mov	r8, r3
 8000aae:	030c      	lsls	r4, r1, #12
 8000ab0:	004b      	lsls	r3, r1, #1
 8000ab2:	0006      	movs	r6, r0
 8000ab4:	4692      	mov	sl, r2
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	0b24      	lsrs	r4, r4, #12
 8000aba:	0d5b      	lsrs	r3, r3, #21
 8000abc:	0fcf      	lsrs	r7, r1, #31
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dmul+0x24>
 8000ac2:	e15c      	b.n	8000d7e <__aeabi_dmul+0x2de>
 8000ac4:	4ad9      	ldr	r2, [pc, #868]	; (8000e2c <__aeabi_dmul+0x38c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dmul+0x2c>
 8000aca:	e175      	b.n	8000db8 <__aeabi_dmul+0x318>
 8000acc:	0f42      	lsrs	r2, r0, #29
 8000ace:	00e4      	lsls	r4, r4, #3
 8000ad0:	4314      	orrs	r4, r2
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0412      	lsls	r2, r2, #16
 8000ad6:	4314      	orrs	r4, r2
 8000ad8:	4ad5      	ldr	r2, [pc, #852]	; (8000e30 <__aeabi_dmul+0x390>)
 8000ada:	00c5      	lsls	r5, r0, #3
 8000adc:	4694      	mov	ip, r2
 8000ade:	4463      	add	r3, ip
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	469b      	mov	fp, r3
 8000ae8:	4643      	mov	r3, r8
 8000aea:	4642      	mov	r2, r8
 8000aec:	031e      	lsls	r6, r3, #12
 8000aee:	0fd2      	lsrs	r2, r2, #31
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4650      	mov	r0, sl
 8000af4:	4690      	mov	r8, r2
 8000af6:	0b36      	lsrs	r6, r6, #12
 8000af8:	0d5b      	lsrs	r3, r3, #21
 8000afa:	d100      	bne.n	8000afe <__aeabi_dmul+0x5e>
 8000afc:	e120      	b.n	8000d40 <__aeabi_dmul+0x2a0>
 8000afe:	4acb      	ldr	r2, [pc, #812]	; (8000e2c <__aeabi_dmul+0x38c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0x66>
 8000b04:	e162      	b.n	8000dcc <__aeabi_dmul+0x32c>
 8000b06:	49ca      	ldr	r1, [pc, #808]	; (8000e30 <__aeabi_dmul+0x390>)
 8000b08:	0f42      	lsrs	r2, r0, #29
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	9900      	ldr	r1, [sp, #0]
 8000b0e:	4463      	add	r3, ip
 8000b10:	00f6      	lsls	r6, r6, #3
 8000b12:	468c      	mov	ip, r1
 8000b14:	4316      	orrs	r6, r2
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	449c      	add	ip, r3
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	4316      	orrs	r6, r2
 8000b20:	00c2      	lsls	r2, r0, #3
 8000b22:	2000      	movs	r0, #0
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	9900      	ldr	r1, [sp, #0]
 8000b28:	4643      	mov	r3, r8
 8000b2a:	3101      	adds	r1, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	4649      	mov	r1, r9
 8000b30:	407b      	eors	r3, r7
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	290f      	cmp	r1, #15
 8000b36:	d826      	bhi.n	8000b86 <__aeabi_dmul+0xe6>
 8000b38:	4bbe      	ldr	r3, [pc, #760]	; (8000e34 <__aeabi_dmul+0x394>)
 8000b3a:	0089      	lsls	r1, r1, #2
 8000b3c:	5859      	ldr	r1, [r3, r1]
 8000b3e:	468f      	mov	pc, r1
 8000b40:	4643      	mov	r3, r8
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	0034      	movs	r4, r6
 8000b46:	0015      	movs	r5, r2
 8000b48:	4683      	mov	fp, r0
 8000b4a:	465b      	mov	r3, fp
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d016      	beq.n	8000b7e <__aeabi_dmul+0xde>
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dmul+0xb6>
 8000b54:	e203      	b.n	8000f5e <__aeabi_dmul+0x4be>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d000      	beq.n	8000b5c <__aeabi_dmul+0xbc>
 8000b5a:	e0cd      	b.n	8000cf8 <__aeabi_dmul+0x258>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2400      	movs	r4, #0
 8000b60:	2500      	movs	r5, #0
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	0512      	lsls	r2, r2, #20
 8000b66:	4322      	orrs	r2, r4
 8000b68:	07db      	lsls	r3, r3, #31
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	0011      	movs	r1, r2
 8000b70:	b007      	add	sp, #28
 8000b72:	bcf0      	pop	{r4, r5, r6, r7}
 8000b74:	46bb      	mov	fp, r7
 8000b76:	46b2      	mov	sl, r6
 8000b78:	46a9      	mov	r9, r5
 8000b7a:	46a0      	mov	r8, r4
 8000b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7e:	2400      	movs	r4, #0
 8000b80:	2500      	movs	r5, #0
 8000b82:	4aaa      	ldr	r2, [pc, #680]	; (8000e2c <__aeabi_dmul+0x38c>)
 8000b84:	e7ed      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000b86:	0c28      	lsrs	r0, r5, #16
 8000b88:	042d      	lsls	r5, r5, #16
 8000b8a:	0c2d      	lsrs	r5, r5, #16
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	0c11      	lsrs	r1, r2, #16
 8000b90:	0412      	lsls	r2, r2, #16
 8000b92:	0c12      	lsrs	r2, r2, #16
 8000b94:	4353      	muls	r3, r2
 8000b96:	4698      	mov	r8, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	002f      	movs	r7, r5
 8000b9c:	4343      	muls	r3, r0
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	434f      	muls	r7, r1
 8000ba2:	444f      	add	r7, r9
 8000ba4:	46bb      	mov	fp, r7
 8000ba6:	4647      	mov	r7, r8
 8000ba8:	000b      	movs	r3, r1
 8000baa:	0c3f      	lsrs	r7, r7, #16
 8000bac:	46ba      	mov	sl, r7
 8000bae:	4343      	muls	r3, r0
 8000bb0:	44da      	add	sl, fp
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	45d1      	cmp	r9, sl
 8000bb6:	d904      	bls.n	8000bc2 <__aeabi_dmul+0x122>
 8000bb8:	2780      	movs	r7, #128	; 0x80
 8000bba:	027f      	lsls	r7, r7, #9
 8000bbc:	46b9      	mov	r9, r7
 8000bbe:	444b      	add	r3, r9
 8000bc0:	9302      	str	r3, [sp, #8]
 8000bc2:	4653      	mov	r3, sl
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	469b      	mov	fp, r3
 8000bc8:	4653      	mov	r3, sl
 8000bca:	041f      	lsls	r7, r3, #16
 8000bcc:	4643      	mov	r3, r8
 8000bce:	041b      	lsls	r3, r3, #16
 8000bd0:	0c1b      	lsrs	r3, r3, #16
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	4443      	add	r3, r8
 8000bd8:	9304      	str	r3, [sp, #16]
 8000bda:	0c33      	lsrs	r3, r6, #16
 8000bdc:	0436      	lsls	r6, r6, #16
 8000bde:	0c36      	lsrs	r6, r6, #16
 8000be0:	4698      	mov	r8, r3
 8000be2:	0033      	movs	r3, r6
 8000be4:	4343      	muls	r3, r0
 8000be6:	4699      	mov	r9, r3
 8000be8:	4643      	mov	r3, r8
 8000bea:	4343      	muls	r3, r0
 8000bec:	002f      	movs	r7, r5
 8000bee:	469a      	mov	sl, r3
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	4377      	muls	r7, r6
 8000bf4:	435d      	muls	r5, r3
 8000bf6:	0c38      	lsrs	r0, r7, #16
 8000bf8:	444d      	add	r5, r9
 8000bfa:	1945      	adds	r5, r0, r5
 8000bfc:	45a9      	cmp	r9, r5
 8000bfe:	d903      	bls.n	8000c08 <__aeabi_dmul+0x168>
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	025b      	lsls	r3, r3, #9
 8000c04:	4699      	mov	r9, r3
 8000c06:	44ca      	add	sl, r9
 8000c08:	043f      	lsls	r7, r7, #16
 8000c0a:	0c28      	lsrs	r0, r5, #16
 8000c0c:	0c3f      	lsrs	r7, r7, #16
 8000c0e:	042d      	lsls	r5, r5, #16
 8000c10:	19ed      	adds	r5, r5, r7
 8000c12:	0c27      	lsrs	r7, r4, #16
 8000c14:	0424      	lsls	r4, r4, #16
 8000c16:	0c24      	lsrs	r4, r4, #16
 8000c18:	0003      	movs	r3, r0
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	4350      	muls	r0, r2
 8000c1e:	437a      	muls	r2, r7
 8000c20:	4691      	mov	r9, r2
 8000c22:	003a      	movs	r2, r7
 8000c24:	4453      	add	r3, sl
 8000c26:	9305      	str	r3, [sp, #20]
 8000c28:	0c03      	lsrs	r3, r0, #16
 8000c2a:	469a      	mov	sl, r3
 8000c2c:	434a      	muls	r2, r1
 8000c2e:	4361      	muls	r1, r4
 8000c30:	4449      	add	r1, r9
 8000c32:	4451      	add	r1, sl
 8000c34:	44ab      	add	fp, r5
 8000c36:	4589      	cmp	r9, r1
 8000c38:	d903      	bls.n	8000c42 <__aeabi_dmul+0x1a2>
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	4699      	mov	r9, r3
 8000c40:	444a      	add	r2, r9
 8000c42:	0400      	lsls	r0, r0, #16
 8000c44:	0c0b      	lsrs	r3, r1, #16
 8000c46:	0c00      	lsrs	r0, r0, #16
 8000c48:	0409      	lsls	r1, r1, #16
 8000c4a:	1809      	adds	r1, r1, r0
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	4699      	mov	r9, r3
 8000c50:	4643      	mov	r3, r8
 8000c52:	4370      	muls	r0, r6
 8000c54:	435c      	muls	r4, r3
 8000c56:	437e      	muls	r6, r7
 8000c58:	435f      	muls	r7, r3
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	4698      	mov	r8, r3
 8000c5e:	19a4      	adds	r4, r4, r6
 8000c60:	4444      	add	r4, r8
 8000c62:	444a      	add	r2, r9
 8000c64:	9703      	str	r7, [sp, #12]
 8000c66:	42a6      	cmp	r6, r4
 8000c68:	d904      	bls.n	8000c74 <__aeabi_dmul+0x1d4>
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	4698      	mov	r8, r3
 8000c70:	4447      	add	r7, r8
 8000c72:	9703      	str	r7, [sp, #12]
 8000c74:	0423      	lsls	r3, r4, #16
 8000c76:	9e02      	ldr	r6, [sp, #8]
 8000c78:	469a      	mov	sl, r3
 8000c7a:	9b05      	ldr	r3, [sp, #20]
 8000c7c:	445e      	add	r6, fp
 8000c7e:	4698      	mov	r8, r3
 8000c80:	42ae      	cmp	r6, r5
 8000c82:	41ad      	sbcs	r5, r5
 8000c84:	1876      	adds	r6, r6, r1
 8000c86:	428e      	cmp	r6, r1
 8000c88:	4189      	sbcs	r1, r1
 8000c8a:	0400      	lsls	r0, r0, #16
 8000c8c:	0c00      	lsrs	r0, r0, #16
 8000c8e:	4450      	add	r0, sl
 8000c90:	4440      	add	r0, r8
 8000c92:	426d      	negs	r5, r5
 8000c94:	1947      	adds	r7, r0, r5
 8000c96:	46b8      	mov	r8, r7
 8000c98:	4693      	mov	fp, r2
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	4689      	mov	r9, r1
 8000c9e:	44c3      	add	fp, r8
 8000ca0:	44d9      	add	r9, fp
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	4180      	sbcs	r0, r0
 8000ca6:	45a8      	cmp	r8, r5
 8000ca8:	41ad      	sbcs	r5, r5
 8000caa:	4593      	cmp	fp, r2
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	4589      	cmp	r9, r1
 8000cb0:	4189      	sbcs	r1, r1
 8000cb2:	426d      	negs	r5, r5
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	4328      	orrs	r0, r5
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	4252      	negs	r2, r2
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	1900      	adds	r0, r0, r4
 8000cc4:	1880      	adds	r0, r0, r2
 8000cc6:	18c7      	adds	r7, r0, r3
 8000cc8:	464b      	mov	r3, r9
 8000cca:	0ddc      	lsrs	r4, r3, #23
 8000ccc:	9b04      	ldr	r3, [sp, #16]
 8000cce:	0275      	lsls	r5, r6, #9
 8000cd0:	431d      	orrs	r5, r3
 8000cd2:	1e6a      	subs	r2, r5, #1
 8000cd4:	4195      	sbcs	r5, r2
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	0df6      	lsrs	r6, r6, #23
 8000cda:	027f      	lsls	r7, r7, #9
 8000cdc:	4335      	orrs	r5, r6
 8000cde:	025a      	lsls	r2, r3, #9
 8000ce0:	433c      	orrs	r4, r7
 8000ce2:	4315      	orrs	r5, r2
 8000ce4:	01fb      	lsls	r3, r7, #7
 8000ce6:	d400      	bmi.n	8000cea <__aeabi_dmul+0x24a>
 8000ce8:	e11c      	b.n	8000f24 <__aeabi_dmul+0x484>
 8000cea:	2101      	movs	r1, #1
 8000cec:	086a      	lsrs	r2, r5, #1
 8000cee:	400d      	ands	r5, r1
 8000cf0:	4315      	orrs	r5, r2
 8000cf2:	07e2      	lsls	r2, r4, #31
 8000cf4:	4315      	orrs	r5, r2
 8000cf6:	0864      	lsrs	r4, r4, #1
 8000cf8:	494f      	ldr	r1, [pc, #316]	; (8000e38 <__aeabi_dmul+0x398>)
 8000cfa:	4461      	add	r1, ip
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dmul+0x262>
 8000d00:	e0b0      	b.n	8000e64 <__aeabi_dmul+0x3c4>
 8000d02:	076b      	lsls	r3, r5, #29
 8000d04:	d009      	beq.n	8000d1a <__aeabi_dmul+0x27a>
 8000d06:	220f      	movs	r2, #15
 8000d08:	402a      	ands	r2, r5
 8000d0a:	2a04      	cmp	r2, #4
 8000d0c:	d005      	beq.n	8000d1a <__aeabi_dmul+0x27a>
 8000d0e:	1d2a      	adds	r2, r5, #4
 8000d10:	42aa      	cmp	r2, r5
 8000d12:	41ad      	sbcs	r5, r5
 8000d14:	426d      	negs	r5, r5
 8000d16:	1964      	adds	r4, r4, r5
 8000d18:	0015      	movs	r5, r2
 8000d1a:	01e3      	lsls	r3, r4, #7
 8000d1c:	d504      	bpl.n	8000d28 <__aeabi_dmul+0x288>
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <__aeabi_dmul+0x39c>)
 8000d22:	00c9      	lsls	r1, r1, #3
 8000d24:	4014      	ands	r4, r2
 8000d26:	4461      	add	r1, ip
 8000d28:	4a45      	ldr	r2, [pc, #276]	; (8000e40 <__aeabi_dmul+0x3a0>)
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	dd00      	ble.n	8000d30 <__aeabi_dmul+0x290>
 8000d2e:	e726      	b.n	8000b7e <__aeabi_dmul+0xde>
 8000d30:	0762      	lsls	r2, r4, #29
 8000d32:	08ed      	lsrs	r5, r5, #3
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	0549      	lsls	r1, r1, #21
 8000d38:	4315      	orrs	r5, r2
 8000d3a:	0b24      	lsrs	r4, r4, #12
 8000d3c:	0d4a      	lsrs	r2, r1, #21
 8000d3e:	e710      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000d40:	4652      	mov	r2, sl
 8000d42:	4332      	orrs	r2, r6
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dmul+0x2a8>
 8000d46:	e07f      	b.n	8000e48 <__aeabi_dmul+0x3a8>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dmul+0x2ae>
 8000d4c:	e0dc      	b.n	8000f08 <__aeabi_dmul+0x468>
 8000d4e:	0030      	movs	r0, r6
 8000d50:	f000 fa08 	bl	8001164 <__clzsi2>
 8000d54:	0002      	movs	r2, r0
 8000d56:	3a0b      	subs	r2, #11
 8000d58:	231d      	movs	r3, #29
 8000d5a:	0001      	movs	r1, r0
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	4652      	mov	r2, sl
 8000d60:	3908      	subs	r1, #8
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	408e      	lsls	r6, r1
 8000d66:	4316      	orrs	r6, r2
 8000d68:	4652      	mov	r2, sl
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	4935      	ldr	r1, [pc, #212]	; (8000e44 <__aeabi_dmul+0x3a4>)
 8000d70:	1a18      	subs	r0, r3, r0
 8000d72:	0003      	movs	r3, r0
 8000d74:	468c      	mov	ip, r1
 8000d76:	4463      	add	r3, ip
 8000d78:	2000      	movs	r0, #0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	e6d3      	b.n	8000b26 <__aeabi_dmul+0x86>
 8000d7e:	0025      	movs	r5, r4
 8000d80:	4305      	orrs	r5, r0
 8000d82:	d04a      	beq.n	8000e1a <__aeabi_dmul+0x37a>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dmul+0x2ea>
 8000d88:	e0b0      	b.n	8000eec <__aeabi_dmul+0x44c>
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f000 f9ea 	bl	8001164 <__clzsi2>
 8000d90:	0001      	movs	r1, r0
 8000d92:	0002      	movs	r2, r0
 8000d94:	390b      	subs	r1, #11
 8000d96:	231d      	movs	r3, #29
 8000d98:	0010      	movs	r0, r2
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	0031      	movs	r1, r6
 8000d9e:	0035      	movs	r5, r6
 8000da0:	3808      	subs	r0, #8
 8000da2:	4084      	lsls	r4, r0
 8000da4:	40d9      	lsrs	r1, r3
 8000da6:	4085      	lsls	r5, r0
 8000da8:	430c      	orrs	r4, r1
 8000daa:	4826      	ldr	r0, [pc, #152]	; (8000e44 <__aeabi_dmul+0x3a4>)
 8000dac:	1a83      	subs	r3, r0, r2
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	4699      	mov	r9, r3
 8000db4:	469b      	mov	fp, r3
 8000db6:	e697      	b.n	8000ae8 <__aeabi_dmul+0x48>
 8000db8:	0005      	movs	r5, r0
 8000dba:	4325      	orrs	r5, r4
 8000dbc:	d126      	bne.n	8000e0c <__aeabi_dmul+0x36c>
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469b      	mov	fp, r3
 8000dca:	e68d      	b.n	8000ae8 <__aeabi_dmul+0x48>
 8000dcc:	4652      	mov	r2, sl
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	4332      	orrs	r2, r6
 8000dd2:	d110      	bne.n	8000df6 <__aeabi_dmul+0x356>
 8000dd4:	4915      	ldr	r1, [pc, #84]	; (8000e2c <__aeabi_dmul+0x38c>)
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	468c      	mov	ip, r1
 8000dda:	4463      	add	r3, ip
 8000ddc:	4649      	mov	r1, r9
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2302      	movs	r3, #2
 8000de2:	4319      	orrs	r1, r3
 8000de4:	4689      	mov	r9, r1
 8000de6:	2002      	movs	r0, #2
 8000de8:	e69d      	b.n	8000b26 <__aeabi_dmul+0x86>
 8000dea:	465b      	mov	r3, fp
 8000dec:	9701      	str	r7, [sp, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d000      	beq.n	8000df4 <__aeabi_dmul+0x354>
 8000df2:	e6ad      	b.n	8000b50 <__aeabi_dmul+0xb0>
 8000df4:	e6c3      	b.n	8000b7e <__aeabi_dmul+0xde>
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <__aeabi_dmul+0x38c>)
 8000df8:	2003      	movs	r0, #3
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	4463      	add	r3, ip
 8000dfe:	464a      	mov	r2, r9
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2303      	movs	r3, #3
 8000e04:	431a      	orrs	r2, r3
 8000e06:	4691      	mov	r9, r2
 8000e08:	4652      	mov	r2, sl
 8000e0a:	e68c      	b.n	8000b26 <__aeabi_dmul+0x86>
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2303      	movs	r3, #3
 8000e12:	0005      	movs	r5, r0
 8000e14:	4691      	mov	r9, r2
 8000e16:	469b      	mov	fp, r3
 8000e18:	e666      	b.n	8000ae8 <__aeabi_dmul+0x48>
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	4699      	mov	r9, r3
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	2400      	movs	r4, #0
 8000e26:	469b      	mov	fp, r3
 8000e28:	e65e      	b.n	8000ae8 <__aeabi_dmul+0x48>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	000007ff 	.word	0x000007ff
 8000e30:	fffffc01 	.word	0xfffffc01
 8000e34:	08003fdc 	.word	0x08003fdc
 8000e38:	000003ff 	.word	0x000003ff
 8000e3c:	feffffff 	.word	0xfeffffff
 8000e40:	000007fe 	.word	0x000007fe
 8000e44:	fffffc0d 	.word	0xfffffc0d
 8000e48:	4649      	mov	r1, r9
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	4689      	mov	r9, r1
 8000e50:	2600      	movs	r6, #0
 8000e52:	2001      	movs	r0, #1
 8000e54:	e667      	b.n	8000b26 <__aeabi_dmul+0x86>
 8000e56:	2300      	movs	r3, #0
 8000e58:	2480      	movs	r4, #128	; 0x80
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	4a43      	ldr	r2, [pc, #268]	; (8000f6c <__aeabi_dmul+0x4cc>)
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	0324      	lsls	r4, r4, #12
 8000e62:	e67e      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000e64:	2001      	movs	r0, #1
 8000e66:	1a40      	subs	r0, r0, r1
 8000e68:	2838      	cmp	r0, #56	; 0x38
 8000e6a:	dd00      	ble.n	8000e6e <__aeabi_dmul+0x3ce>
 8000e6c:	e676      	b.n	8000b5c <__aeabi_dmul+0xbc>
 8000e6e:	281f      	cmp	r0, #31
 8000e70:	dd5b      	ble.n	8000f2a <__aeabi_dmul+0x48a>
 8000e72:	221f      	movs	r2, #31
 8000e74:	0023      	movs	r3, r4
 8000e76:	4252      	negs	r2, r2
 8000e78:	1a51      	subs	r1, r2, r1
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	2820      	cmp	r0, #32
 8000e80:	d003      	beq.n	8000e8a <__aeabi_dmul+0x3ea>
 8000e82:	4a3b      	ldr	r2, [pc, #236]	; (8000f70 <__aeabi_dmul+0x4d0>)
 8000e84:	4462      	add	r2, ip
 8000e86:	4094      	lsls	r4, r2
 8000e88:	4325      	orrs	r5, r4
 8000e8a:	1e6a      	subs	r2, r5, #1
 8000e8c:	4195      	sbcs	r5, r2
 8000e8e:	002a      	movs	r2, r5
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2107      	movs	r1, #7
 8000e94:	000d      	movs	r5, r1
 8000e96:	2400      	movs	r4, #0
 8000e98:	4015      	ands	r5, r2
 8000e9a:	4211      	tst	r1, r2
 8000e9c:	d05b      	beq.n	8000f56 <__aeabi_dmul+0x4b6>
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	4011      	ands	r1, r2
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d053      	beq.n	8000f50 <__aeabi_dmul+0x4b0>
 8000ea8:	1d11      	adds	r1, r2, #4
 8000eaa:	4291      	cmp	r1, r2
 8000eac:	4192      	sbcs	r2, r2
 8000eae:	4252      	negs	r2, r2
 8000eb0:	18a4      	adds	r4, r4, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	0223      	lsls	r3, r4, #8
 8000eb6:	d54b      	bpl.n	8000f50 <__aeabi_dmul+0x4b0>
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2400      	movs	r4, #0
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	e650      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	031b      	lsls	r3, r3, #12
 8000ec4:	421c      	tst	r4, r3
 8000ec6:	d009      	beq.n	8000edc <__aeabi_dmul+0x43c>
 8000ec8:	421e      	tst	r6, r3
 8000eca:	d107      	bne.n	8000edc <__aeabi_dmul+0x43c>
 8000ecc:	4333      	orrs	r3, r6
 8000ece:	031c      	lsls	r4, r3, #12
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0015      	movs	r5, r2
 8000ed4:	0b24      	lsrs	r4, r4, #12
 8000ed6:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <__aeabi_dmul+0x4cc>)
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	e642      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0312      	lsls	r2, r2, #12
 8000ee0:	4314      	orrs	r4, r2
 8000ee2:	0324      	lsls	r4, r4, #12
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <__aeabi_dmul+0x4cc>)
 8000ee6:	0b24      	lsrs	r4, r4, #12
 8000ee8:	9701      	str	r7, [sp, #4]
 8000eea:	e63a      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000eec:	f000 f93a 	bl	8001164 <__clzsi2>
 8000ef0:	0001      	movs	r1, r0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	3115      	adds	r1, #21
 8000ef6:	3220      	adds	r2, #32
 8000ef8:	291c      	cmp	r1, #28
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dmul+0x45e>
 8000efc:	e74b      	b.n	8000d96 <__aeabi_dmul+0x2f6>
 8000efe:	0034      	movs	r4, r6
 8000f00:	3808      	subs	r0, #8
 8000f02:	2500      	movs	r5, #0
 8000f04:	4084      	lsls	r4, r0
 8000f06:	e750      	b.n	8000daa <__aeabi_dmul+0x30a>
 8000f08:	f000 f92c 	bl	8001164 <__clzsi2>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	001a      	movs	r2, r3
 8000f10:	3215      	adds	r2, #21
 8000f12:	3020      	adds	r0, #32
 8000f14:	2a1c      	cmp	r2, #28
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_dmul+0x47a>
 8000f18:	e71e      	b.n	8000d58 <__aeabi_dmul+0x2b8>
 8000f1a:	4656      	mov	r6, sl
 8000f1c:	3b08      	subs	r3, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	409e      	lsls	r6, r3
 8000f22:	e723      	b.n	8000d6c <__aeabi_dmul+0x2cc>
 8000f24:	9b00      	ldr	r3, [sp, #0]
 8000f26:	469c      	mov	ip, r3
 8000f28:	e6e6      	b.n	8000cf8 <__aeabi_dmul+0x258>
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <__aeabi_dmul+0x4d4>)
 8000f2c:	0022      	movs	r2, r4
 8000f2e:	4461      	add	r1, ip
 8000f30:	002e      	movs	r6, r5
 8000f32:	408d      	lsls	r5, r1
 8000f34:	408a      	lsls	r2, r1
 8000f36:	40c6      	lsrs	r6, r0
 8000f38:	1e69      	subs	r1, r5, #1
 8000f3a:	418d      	sbcs	r5, r1
 8000f3c:	4332      	orrs	r2, r6
 8000f3e:	432a      	orrs	r2, r5
 8000f40:	40c4      	lsrs	r4, r0
 8000f42:	0753      	lsls	r3, r2, #29
 8000f44:	d0b6      	beq.n	8000eb4 <__aeabi_dmul+0x414>
 8000f46:	210f      	movs	r1, #15
 8000f48:	4011      	ands	r1, r2
 8000f4a:	2904      	cmp	r1, #4
 8000f4c:	d1ac      	bne.n	8000ea8 <__aeabi_dmul+0x408>
 8000f4e:	e7b1      	b.n	8000eb4 <__aeabi_dmul+0x414>
 8000f50:	0765      	lsls	r5, r4, #29
 8000f52:	0264      	lsls	r4, r4, #9
 8000f54:	0b24      	lsrs	r4, r4, #12
 8000f56:	08d2      	lsrs	r2, r2, #3
 8000f58:	4315      	orrs	r5, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	e601      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	0312      	lsls	r2, r2, #12
 8000f62:	4314      	orrs	r4, r2
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	4a01      	ldr	r2, [pc, #4]	; (8000f6c <__aeabi_dmul+0x4cc>)
 8000f68:	0b24      	lsrs	r4, r4, #12
 8000f6a:	e5fa      	b.n	8000b62 <__aeabi_dmul+0xc2>
 8000f6c:	000007ff 	.word	0x000007ff
 8000f70:	0000043e 	.word	0x0000043e
 8000f74:	0000041e 	.word	0x0000041e

08000f78 <__aeabi_ui2d>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	1e04      	subs	r4, r0, #0
 8000f7c:	d010      	beq.n	8000fa0 <__aeabi_ui2d+0x28>
 8000f7e:	f000 f8f1 	bl	8001164 <__clzsi2>
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <__aeabi_ui2d+0x48>)
 8000f84:	1a1b      	subs	r3, r3, r0
 8000f86:	280a      	cmp	r0, #10
 8000f88:	dc11      	bgt.n	8000fae <__aeabi_ui2d+0x36>
 8000f8a:	220b      	movs	r2, #11
 8000f8c:	0021      	movs	r1, r4
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	3015      	adds	r0, #21
 8000f94:	030a      	lsls	r2, r1, #12
 8000f96:	055b      	lsls	r3, r3, #21
 8000f98:	4084      	lsls	r4, r0
 8000f9a:	0b12      	lsrs	r2, r2, #12
 8000f9c:	0d5b      	lsrs	r3, r3, #21
 8000f9e:	e001      	b.n	8000fa4 <__aeabi_ui2d+0x2c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	051b      	lsls	r3, r3, #20
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	0020      	movs	r0, r4
 8000faa:	0019      	movs	r1, r3
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	0022      	movs	r2, r4
 8000fb0:	380b      	subs	r0, #11
 8000fb2:	4082      	lsls	r2, r0
 8000fb4:	055b      	lsls	r3, r3, #21
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	2400      	movs	r4, #0
 8000fba:	0b12      	lsrs	r2, r2, #12
 8000fbc:	0d5b      	lsrs	r3, r3, #21
 8000fbe:	e7f1      	b.n	8000fa4 <__aeabi_ui2d+0x2c>
 8000fc0:	0000041e 	.word	0x0000041e

08000fc4 <__aeabi_f2d>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	0043      	lsls	r3, r0, #1
 8000fc8:	0246      	lsls	r6, r0, #9
 8000fca:	0fc4      	lsrs	r4, r0, #31
 8000fcc:	20fe      	movs	r0, #254	; 0xfe
 8000fce:	0e1b      	lsrs	r3, r3, #24
 8000fd0:	1c59      	adds	r1, r3, #1
 8000fd2:	0a75      	lsrs	r5, r6, #9
 8000fd4:	4208      	tst	r0, r1
 8000fd6:	d00c      	beq.n	8000ff2 <__aeabi_f2d+0x2e>
 8000fd8:	22e0      	movs	r2, #224	; 0xe0
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4694      	mov	ip, r2
 8000fde:	076d      	lsls	r5, r5, #29
 8000fe0:	0b36      	lsrs	r6, r6, #12
 8000fe2:	4463      	add	r3, ip
 8000fe4:	051b      	lsls	r3, r3, #20
 8000fe6:	4333      	orrs	r3, r6
 8000fe8:	07e4      	lsls	r4, r4, #31
 8000fea:	4323      	orrs	r3, r4
 8000fec:	0028      	movs	r0, r5
 8000fee:	0019      	movs	r1, r3
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d114      	bne.n	8001020 <__aeabi_f2d+0x5c>
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	d01b      	beq.n	8001032 <__aeabi_f2d+0x6e>
 8000ffa:	0028      	movs	r0, r5
 8000ffc:	f000 f8b2 	bl	8001164 <__clzsi2>
 8001000:	280a      	cmp	r0, #10
 8001002:	dc1c      	bgt.n	800103e <__aeabi_f2d+0x7a>
 8001004:	230b      	movs	r3, #11
 8001006:	002e      	movs	r6, r5
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	40de      	lsrs	r6, r3
 800100c:	0003      	movs	r3, r0
 800100e:	3315      	adds	r3, #21
 8001010:	409d      	lsls	r5, r3
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <__aeabi_f2d+0x88>)
 8001014:	0336      	lsls	r6, r6, #12
 8001016:	1a12      	subs	r2, r2, r0
 8001018:	0552      	lsls	r2, r2, #21
 800101a:	0b36      	lsrs	r6, r6, #12
 800101c:	0d53      	lsrs	r3, r2, #21
 800101e:	e7e1      	b.n	8000fe4 <__aeabi_f2d+0x20>
 8001020:	2d00      	cmp	r5, #0
 8001022:	d009      	beq.n	8001038 <__aeabi_f2d+0x74>
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0b36      	lsrs	r6, r6, #12
 8001028:	0312      	lsls	r2, r2, #12
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <__aeabi_f2d+0x8c>)
 800102c:	076d      	lsls	r5, r5, #29
 800102e:	4316      	orrs	r6, r2
 8001030:	e7d8      	b.n	8000fe4 <__aeabi_f2d+0x20>
 8001032:	2300      	movs	r3, #0
 8001034:	2600      	movs	r6, #0
 8001036:	e7d5      	b.n	8000fe4 <__aeabi_f2d+0x20>
 8001038:	2600      	movs	r6, #0
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <__aeabi_f2d+0x8c>)
 800103c:	e7d2      	b.n	8000fe4 <__aeabi_f2d+0x20>
 800103e:	0003      	movs	r3, r0
 8001040:	3b0b      	subs	r3, #11
 8001042:	409d      	lsls	r5, r3
 8001044:	002e      	movs	r6, r5
 8001046:	2500      	movs	r5, #0
 8001048:	e7e3      	b.n	8001012 <__aeabi_f2d+0x4e>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	00000389 	.word	0x00000389
 8001050:	000007ff 	.word	0x000007ff

08001054 <__aeabi_d2f>:
 8001054:	0002      	movs	r2, r0
 8001056:	004b      	lsls	r3, r1, #1
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	0d5b      	lsrs	r3, r3, #21
 800105c:	030c      	lsls	r4, r1, #12
 800105e:	4e3d      	ldr	r6, [pc, #244]	; (8001154 <__aeabi_d2f+0x100>)
 8001060:	0a64      	lsrs	r4, r4, #9
 8001062:	0f40      	lsrs	r0, r0, #29
 8001064:	1c5f      	adds	r7, r3, #1
 8001066:	0fc9      	lsrs	r1, r1, #31
 8001068:	4304      	orrs	r4, r0
 800106a:	00d5      	lsls	r5, r2, #3
 800106c:	4237      	tst	r7, r6
 800106e:	d00a      	beq.n	8001086 <__aeabi_d2f+0x32>
 8001070:	4839      	ldr	r0, [pc, #228]	; (8001158 <__aeabi_d2f+0x104>)
 8001072:	181e      	adds	r6, r3, r0
 8001074:	2efe      	cmp	r6, #254	; 0xfe
 8001076:	dd16      	ble.n	80010a6 <__aeabi_d2f+0x52>
 8001078:	20ff      	movs	r0, #255	; 0xff
 800107a:	2400      	movs	r4, #0
 800107c:	05c0      	lsls	r0, r0, #23
 800107e:	4320      	orrs	r0, r4
 8001080:	07c9      	lsls	r1, r1, #31
 8001082:	4308      	orrs	r0, r1
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <__aeabi_d2f+0x44>
 800108a:	432c      	orrs	r4, r5
 800108c:	d026      	beq.n	80010dc <__aeabi_d2f+0x88>
 800108e:	2205      	movs	r2, #5
 8001090:	0192      	lsls	r2, r2, #6
 8001092:	0a54      	lsrs	r4, r2, #9
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	e7f1      	b.n	800107c <__aeabi_d2f+0x28>
 8001098:	4325      	orrs	r5, r4
 800109a:	d0ed      	beq.n	8001078 <__aeabi_d2f+0x24>
 800109c:	2080      	movs	r0, #128	; 0x80
 800109e:	03c0      	lsls	r0, r0, #15
 80010a0:	4304      	orrs	r4, r0
 80010a2:	20ff      	movs	r0, #255	; 0xff
 80010a4:	e7ea      	b.n	800107c <__aeabi_d2f+0x28>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	dd1b      	ble.n	80010e2 <__aeabi_d2f+0x8e>
 80010aa:	0192      	lsls	r2, r2, #6
 80010ac:	1e53      	subs	r3, r2, #1
 80010ae:	419a      	sbcs	r2, r3
 80010b0:	00e4      	lsls	r4, r4, #3
 80010b2:	0f6d      	lsrs	r5, r5, #29
 80010b4:	4322      	orrs	r2, r4
 80010b6:	432a      	orrs	r2, r5
 80010b8:	0753      	lsls	r3, r2, #29
 80010ba:	d048      	beq.n	800114e <__aeabi_d2f+0xfa>
 80010bc:	230f      	movs	r3, #15
 80010be:	4013      	ands	r3, r2
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d000      	beq.n	80010c6 <__aeabi_d2f+0x72>
 80010c4:	3204      	adds	r2, #4
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	04db      	lsls	r3, r3, #19
 80010ca:	4013      	ands	r3, r2
 80010cc:	d03f      	beq.n	800114e <__aeabi_d2f+0xfa>
 80010ce:	1c70      	adds	r0, r6, #1
 80010d0:	2efe      	cmp	r6, #254	; 0xfe
 80010d2:	d0d1      	beq.n	8001078 <__aeabi_d2f+0x24>
 80010d4:	0192      	lsls	r2, r2, #6
 80010d6:	0a54      	lsrs	r4, r2, #9
 80010d8:	b2c0      	uxtb	r0, r0
 80010da:	e7cf      	b.n	800107c <__aeabi_d2f+0x28>
 80010dc:	2000      	movs	r0, #0
 80010de:	2400      	movs	r4, #0
 80010e0:	e7cc      	b.n	800107c <__aeabi_d2f+0x28>
 80010e2:	0032      	movs	r2, r6
 80010e4:	3217      	adds	r2, #23
 80010e6:	db22      	blt.n	800112e <__aeabi_d2f+0xda>
 80010e8:	2080      	movs	r0, #128	; 0x80
 80010ea:	0400      	lsls	r0, r0, #16
 80010ec:	4320      	orrs	r0, r4
 80010ee:	241e      	movs	r4, #30
 80010f0:	1ba4      	subs	r4, r4, r6
 80010f2:	2c1f      	cmp	r4, #31
 80010f4:	dd1d      	ble.n	8001132 <__aeabi_d2f+0xde>
 80010f6:	2202      	movs	r2, #2
 80010f8:	4252      	negs	r2, r2
 80010fa:	1b96      	subs	r6, r2, r6
 80010fc:	0002      	movs	r2, r0
 80010fe:	40f2      	lsrs	r2, r6
 8001100:	0016      	movs	r6, r2
 8001102:	2c20      	cmp	r4, #32
 8001104:	d004      	beq.n	8001110 <__aeabi_d2f+0xbc>
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <__aeabi_d2f+0x108>)
 8001108:	4694      	mov	ip, r2
 800110a:	4463      	add	r3, ip
 800110c:	4098      	lsls	r0, r3
 800110e:	4305      	orrs	r5, r0
 8001110:	002a      	movs	r2, r5
 8001112:	1e53      	subs	r3, r2, #1
 8001114:	419a      	sbcs	r2, r3
 8001116:	4332      	orrs	r2, r6
 8001118:	2600      	movs	r6, #0
 800111a:	0753      	lsls	r3, r2, #29
 800111c:	d1ce      	bne.n	80010bc <__aeabi_d2f+0x68>
 800111e:	2480      	movs	r4, #128	; 0x80
 8001120:	0013      	movs	r3, r2
 8001122:	04e4      	lsls	r4, r4, #19
 8001124:	2001      	movs	r0, #1
 8001126:	4023      	ands	r3, r4
 8001128:	4222      	tst	r2, r4
 800112a:	d1d3      	bne.n	80010d4 <__aeabi_d2f+0x80>
 800112c:	e7b0      	b.n	8001090 <__aeabi_d2f+0x3c>
 800112e:	2300      	movs	r3, #0
 8001130:	e7ad      	b.n	800108e <__aeabi_d2f+0x3a>
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <__aeabi_d2f+0x10c>)
 8001134:	4694      	mov	ip, r2
 8001136:	002a      	movs	r2, r5
 8001138:	40e2      	lsrs	r2, r4
 800113a:	0014      	movs	r4, r2
 800113c:	002a      	movs	r2, r5
 800113e:	4463      	add	r3, ip
 8001140:	409a      	lsls	r2, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	1e55      	subs	r5, r2, #1
 8001146:	41aa      	sbcs	r2, r5
 8001148:	4302      	orrs	r2, r0
 800114a:	4322      	orrs	r2, r4
 800114c:	e7e4      	b.n	8001118 <__aeabi_d2f+0xc4>
 800114e:	0033      	movs	r3, r6
 8001150:	e79e      	b.n	8001090 <__aeabi_d2f+0x3c>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	000007fe 	.word	0x000007fe
 8001158:	fffffc80 	.word	0xfffffc80
 800115c:	fffffca2 	.word	0xfffffca2
 8001160:	fffffc82 	.word	0xfffffc82

08001164 <__clzsi2>:
 8001164:	211c      	movs	r1, #28
 8001166:	2301      	movs	r3, #1
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	4298      	cmp	r0, r3
 800116c:	d301      	bcc.n	8001172 <__clzsi2+0xe>
 800116e:	0c00      	lsrs	r0, r0, #16
 8001170:	3910      	subs	r1, #16
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	4298      	cmp	r0, r3
 8001176:	d301      	bcc.n	800117c <__clzsi2+0x18>
 8001178:	0a00      	lsrs	r0, r0, #8
 800117a:	3908      	subs	r1, #8
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	4298      	cmp	r0, r3
 8001180:	d301      	bcc.n	8001186 <__clzsi2+0x22>
 8001182:	0900      	lsrs	r0, r0, #4
 8001184:	3904      	subs	r1, #4
 8001186:	a202      	add	r2, pc, #8	; (adr r2, 8001190 <__clzsi2+0x2c>)
 8001188:	5c10      	ldrb	r0, [r2, r0]
 800118a:	1840      	adds	r0, r0, r1
 800118c:	4770      	bx	lr
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	02020304 	.word	0x02020304
 8001194:	01010101 	.word	0x01010101
	...

080011a0 <ADC_SelectChannel>:




void ADC_SelectChannel(uint32_t channel)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80011a8:	240c      	movs	r4, #12
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	0018      	movs	r0, r3
 80011ae:	230c      	movs	r3, #12
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f002 fede 	bl	8003f74 <memset>
    sConfig.Channel = channel;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2203      	movs	r2, #3
 80011c8:	609a      	str	r2, [r3, #8]

    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ca:	193a      	adds	r2, r7, r4
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <ADC_SelectChannel+0x48>)
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 ff53 	bl	800207c <HAL_ADC_ConfigChannel>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <ADC_SelectChannel+0x3e>
    {
        Error_Handler();
 80011da:	f000 fb25 	bl	8001828 <Error_Handler>
    }
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b007      	add	sp, #28
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000028 	.word	0x20000028

080011ec <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	801a      	strh	r2, [r3, #0]
	    if (GPIO_Pin == GPIO_PIN_13)
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	019b      	lsls	r3, r3, #6
 8001200:	429a      	cmp	r2, r3
 8001202:	d157      	bne.n	80012b4 <HAL_GPIO_EXTI_Callback+0xc8>
	    {
	        // ADC_CHANNEL_0
	    	ADC_SelectChannel(ADC_CHANNEL_0);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ffcb 	bl	80011a0 <ADC_SelectChannel>
		HAL_ADC_Start(&hadc);
 800120a:	4bb9      	ldr	r3, [pc, #740]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fdfd 	bl	8001e0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001212:	2301      	movs	r3, #1
 8001214:	425a      	negs	r2, r3
 8001216:	4bb6      	ldr	r3, [pc, #728]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fe8a 	bl	8001f34 <HAL_ADC_PollForConversion>
		adc_var[0]= HAL_ADC_GetValue(&hadc);
 8001220:	4bb3      	ldr	r3, [pc, #716]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001222:	0018      	movs	r0, r3
 8001224:	f000 ff1e 	bl	8002064 <HAL_ADC_GetValue>
 8001228:	0002      	movs	r2, r0
 800122a:	4bb2      	ldr	r3, [pc, #712]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 800122c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800122e:	4bb0      	ldr	r3, [pc, #704]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fe3f 	bl	8001eb4 <HAL_ADC_Stop>
		adc_voltage[0] = (adc_var[0]*3.3)/255.0;
 8001236:	4baf      	ldr	r3, [pc, #700]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff fe9c 	bl	8000f78 <__aeabi_ui2d>
 8001240:	4aad      	ldr	r2, [pc, #692]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001242:	4bae      	ldr	r3, [pc, #696]	; (80014fc <HAL_GPIO_EXTI_Callback+0x310>)
 8001244:	f7ff fc2c 	bl	8000aa0 <__aeabi_dmul>
 8001248:	0002      	movs	r2, r0
 800124a:	000b      	movs	r3, r1
 800124c:	0010      	movs	r0, r2
 800124e:	0019      	movs	r1, r3
 8001250:	2200      	movs	r2, #0
 8001252:	4bab      	ldr	r3, [pc, #684]	; (8001500 <HAL_GPIO_EXTI_Callback+0x314>)
 8001254:	f7ff f822 	bl	800029c <__aeabi_ddiv>
 8001258:	0002      	movs	r2, r0
 800125a:	000b      	movs	r3, r1
 800125c:	0010      	movs	r0, r2
 800125e:	0019      	movs	r1, r3
 8001260:	f7ff fef8 	bl	8001054 <__aeabi_d2f>
 8001264:	1c02      	adds	r2, r0, #0
 8001266:	4ba7      	ldr	r3, [pc, #668]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001268:	601a      	str	r2, [r3, #0]
		//f1 = 1<<4;
		f1 = 0x1;
 800126a:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <HAL_GPIO_EXTI_Callback+0x31c>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

			 	 if ( adc_voltage[0] >= 0.2 || adc_voltage[0] <= 0.09  )
 8001270:	4ba4      	ldr	r3, [pc, #656]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1c18      	adds	r0, r3, #0
 8001276:	f7ff fea5 	bl	8000fc4 <__aeabi_f2d>
 800127a:	4aa4      	ldr	r2, [pc, #656]	; (800150c <HAL_GPIO_EXTI_Callback+0x320>)
 800127c:	4ba4      	ldr	r3, [pc, #656]	; (8001510 <HAL_GPIO_EXTI_Callback+0x324>)
 800127e:	f7ff f803 	bl	8000288 <__aeabi_dcmpge>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d10a      	bne.n	800129c <HAL_GPIO_EXTI_Callback+0xb0>
 8001286:	4b9f      	ldr	r3, [pc, #636]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1c18      	adds	r0, r3, #0
 800128c:	f7ff fe9a 	bl	8000fc4 <__aeabi_f2d>
 8001290:	4aa0      	ldr	r2, [pc, #640]	; (8001514 <HAL_GPIO_EXTI_Callback+0x328>)
 8001292:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001294:	f7fe ffe4 	bl	8000260 <__aeabi_dcmple>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_EXTI_Callback+0xbe>
			 	  {
			 		 //f1+=1;
			 		 f1 = (f1 | 0x1) ;
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <HAL_GPIO_EXTI_Callback+0x31c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b98      	ldr	r3, [pc, #608]	; (8001508 <HAL_GPIO_EXTI_Callback+0x31c>)
 80012a8:	701a      	strb	r2, [r3, #0]
			 	  }
			 	  else
			 	  {

			 	  }
			 	T[0] = f1;
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_GPIO_EXTI_Callback+0x31c>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b9b      	ldr	r3, [pc, #620]	; (800151c <HAL_GPIO_EXTI_Callback+0x330>)
 80012b0:	701a      	strb	r2, [r3, #0]

			 		 		 	  }
			 	T[3] = f4;

	}
}
 80012b2:	e118      	b.n	80014e6 <HAL_GPIO_EXTI_Callback+0x2fa>
	 else if (GPIO_Pin == GPIO_PIN_12)
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	429a      	cmp	r2, r3
 80012be:	d157      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x184>
		ADC_SelectChannel(ADC_CHANNEL_1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff ff6d 	bl	80011a0 <ADC_SelectChannel>
		HAL_ADC_Start(&hadc);
 80012c6:	4b8a      	ldr	r3, [pc, #552]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fd9f 	bl	8001e0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012ce:	2301      	movs	r3, #1
 80012d0:	425a      	negs	r2, r3
 80012d2:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fe2c 	bl	8001f34 <HAL_ADC_PollForConversion>
		adc_var[1]= HAL_ADC_GetValue(&hadc);
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fec0 	bl	8002064 <HAL_ADC_GetValue>
 80012e4:	0002      	movs	r2, r0
 80012e6:	4b83      	ldr	r3, [pc, #524]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 80012e8:	605a      	str	r2, [r3, #4]
		HAL_ADC_Stop(&hadc);
 80012ea:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fde1 	bl	8001eb4 <HAL_ADC_Stop>
		adc_voltage[1] = (adc_var[1]*3.3)/255.0;
 80012f2:	4b80      	ldr	r3, [pc, #512]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fe3e 	bl	8000f78 <__aeabi_ui2d>
 80012fc:	4a7e      	ldr	r2, [pc, #504]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_GPIO_EXTI_Callback+0x310>)
 8001300:	f7ff fbce 	bl	8000aa0 <__aeabi_dmul>
 8001304:	0002      	movs	r2, r0
 8001306:	000b      	movs	r3, r1
 8001308:	0010      	movs	r0, r2
 800130a:	0019      	movs	r1, r3
 800130c:	2200      	movs	r2, #0
 800130e:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <HAL_GPIO_EXTI_Callback+0x314>)
 8001310:	f7fe ffc4 	bl	800029c <__aeabi_ddiv>
 8001314:	0002      	movs	r2, r0
 8001316:	000b      	movs	r3, r1
 8001318:	0010      	movs	r0, r2
 800131a:	0019      	movs	r1, r3
 800131c:	f7ff fe9a 	bl	8001054 <__aeabi_d2f>
 8001320:	1c02      	adds	r2, r0, #0
 8001322:	4b78      	ldr	r3, [pc, #480]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001324:	605a      	str	r2, [r3, #4]
		f2 = 0x2;
 8001326:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <HAL_GPIO_EXTI_Callback+0x334>)
 8001328:	2202      	movs	r2, #2
 800132a:	701a      	strb	r2, [r3, #0]
			 	 if ( adc_voltage[1] >= 0.2 || adc_voltage[1] <= 0.09  )
 800132c:	4b75      	ldr	r3, [pc, #468]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	1c18      	adds	r0, r3, #0
 8001332:	f7ff fe47 	bl	8000fc4 <__aeabi_f2d>
 8001336:	4a75      	ldr	r2, [pc, #468]	; (800150c <HAL_GPIO_EXTI_Callback+0x320>)
 8001338:	4b75      	ldr	r3, [pc, #468]	; (8001510 <HAL_GPIO_EXTI_Callback+0x324>)
 800133a:	f7fe ffa5 	bl	8000288 <__aeabi_dcmpge>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d10a      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x16c>
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	1c18      	adds	r0, r3, #0
 8001348:	f7ff fe3c 	bl	8000fc4 <__aeabi_f2d>
 800134c:	4a71      	ldr	r2, [pc, #452]	; (8001514 <HAL_GPIO_EXTI_Callback+0x328>)
 800134e:	4b72      	ldr	r3, [pc, #456]	; (8001518 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001350:	f7fe ff86 	bl	8000260 <__aeabi_dcmple>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_EXTI_Callback+0x17a>
			 		 	 	 f2 = (f2 | 0x1);
 8001358:	4b71      	ldr	r3, [pc, #452]	; (8001520 <HAL_GPIO_EXTI_Callback+0x334>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2201      	movs	r2, #1
 800135e:	4313      	orrs	r3, r2
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <HAL_GPIO_EXTI_Callback+0x334>)
 8001364:	701a      	strb	r2, [r3, #0]
			 	T[1] = f2;
 8001366:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <HAL_GPIO_EXTI_Callback+0x334>)
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	4b6c      	ldr	r3, [pc, #432]	; (800151c <HAL_GPIO_EXTI_Callback+0x330>)
 800136c:	705a      	strb	r2, [r3, #1]
}
 800136e:	e0ba      	b.n	80014e6 <HAL_GPIO_EXTI_Callback+0x2fa>
	  else if (GPIO_Pin == GPIO_PIN_11)
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	429a      	cmp	r2, r3
 800137a:	d157      	bne.n	800142c <HAL_GPIO_EXTI_Callback+0x240>
	 ADC_SelectChannel(ADC_CHANNEL_2);
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff ff0f 	bl	80011a0 <ADC_SelectChannel>
		HAL_ADC_Start(&hadc);
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001384:	0018      	movs	r0, r3
 8001386:	f000 fd41 	bl	8001e0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800138a:	2301      	movs	r3, #1
 800138c:	425a      	negs	r2, r3
 800138e:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fdce 	bl	8001f34 <HAL_ADC_PollForConversion>
		adc_var[2]= HAL_ADC_GetValue(&hadc);
 8001398:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fe62 	bl	8002064 <HAL_ADC_GetValue>
 80013a0:	0002      	movs	r2, r0
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013a4:	609a      	str	r2, [r3, #8]
		HAL_ADC_Stop(&hadc);
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 fd83 	bl	8001eb4 <HAL_ADC_Stop>
		adc_voltage[2] = (adc_var[2]*3.3)/255.0;
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff fde0 	bl	8000f78 <__aeabi_ui2d>
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80013ba:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_GPIO_EXTI_Callback+0x310>)
 80013bc:	f7ff fb70 	bl	8000aa0 <__aeabi_dmul>
 80013c0:	0002      	movs	r2, r0
 80013c2:	000b      	movs	r3, r1
 80013c4:	0010      	movs	r0, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <HAL_GPIO_EXTI_Callback+0x314>)
 80013cc:	f7fe ff66 	bl	800029c <__aeabi_ddiv>
 80013d0:	0002      	movs	r2, r0
 80013d2:	000b      	movs	r3, r1
 80013d4:	0010      	movs	r0, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	f7ff fe3c 	bl	8001054 <__aeabi_d2f>
 80013dc:	1c02      	adds	r2, r0, #0
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 80013e0:	609a      	str	r2, [r3, #8]
		f3 = 0x3;
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <HAL_GPIO_EXTI_Callback+0x338>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
			 	if ( adc_voltage[2] >= 0.2 || adc_voltage[2] <= 0.09  )
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	1c18      	adds	r0, r3, #0
 80013ee:	f7ff fde9 	bl	8000fc4 <__aeabi_f2d>
 80013f2:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_GPIO_EXTI_Callback+0x320>)
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_GPIO_EXTI_Callback+0x324>)
 80013f6:	f7fe ff47 	bl	8000288 <__aeabi_dcmpge>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d10a      	bne.n	8001414 <HAL_GPIO_EXTI_Callback+0x228>
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	1c18      	adds	r0, r3, #0
 8001404:	f7ff fdde 	bl	8000fc4 <__aeabi_f2d>
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_GPIO_EXTI_Callback+0x328>)
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_GPIO_EXTI_Callback+0x32c>)
 800140c:	f7fe ff28 	bl	8000260 <__aeabi_dcmple>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_EXTI_Callback+0x236>
			 						f3 = (f3 | 0x1);
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_GPIO_EXTI_Callback+0x338>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4313      	orrs	r3, r2
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_GPIO_EXTI_Callback+0x338>)
 8001420:	701a      	strb	r2, [r3, #0]
			 	T[2] = f3;
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_GPIO_EXTI_Callback+0x338>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_GPIO_EXTI_Callback+0x330>)
 8001428:	709a      	strb	r2, [r3, #2]
}
 800142a:	e05c      	b.n	80014e6 <HAL_GPIO_EXTI_Callback+0x2fa>
	  else if (GPIO_Pin == GPIO_PIN_10)
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	429a      	cmp	r2, r3
 8001436:	d156      	bne.n	80014e6 <HAL_GPIO_EXTI_Callback+0x2fa>
		  ADC_SelectChannel(ADC_CHANNEL_3);
 8001438:	2003      	movs	r0, #3
 800143a:	f7ff feb1 	bl	80011a0 <ADC_SelectChannel>
		HAL_ADC_Start(&hadc);
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001440:	0018      	movs	r0, r3
 8001442:	f000 fce3 	bl	8001e0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001446:	2301      	movs	r3, #1
 8001448:	425a      	negs	r2, r3
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fd70 	bl	8001f34 <HAL_ADC_PollForConversion>
		adc_var[3]= HAL_ADC_GetValue(&hadc);
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fe04 	bl	8002064 <HAL_ADC_GetValue>
 800145c:	0002      	movs	r2, r0
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 8001460:	60da      	str	r2, [r3, #12]
		HAL_ADC_Stop(&hadc);
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fd25 	bl	8001eb4 <HAL_ADC_Stop>
		adc_voltage[3] = (adc_var[3]*3.3)/255.0;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_GPIO_EXTI_Callback+0x308>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fd82 	bl	8000f78 <__aeabi_ui2d>
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_GPIO_EXTI_Callback+0x310>)
 8001478:	f7ff fb12 	bl	8000aa0 <__aeabi_dmul>
 800147c:	0002      	movs	r2, r0
 800147e:	000b      	movs	r3, r1
 8001480:	0010      	movs	r0, r2
 8001482:	0019      	movs	r1, r3
 8001484:	2200      	movs	r2, #0
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_GPIO_EXTI_Callback+0x314>)
 8001488:	f7fe ff08 	bl	800029c <__aeabi_ddiv>
 800148c:	0002      	movs	r2, r0
 800148e:	000b      	movs	r3, r1
 8001490:	0010      	movs	r0, r2
 8001492:	0019      	movs	r1, r3
 8001494:	f7ff fdde 	bl	8001054 <__aeabi_d2f>
 8001498:	1c02      	adds	r2, r0, #0
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 800149c:	60da      	str	r2, [r3, #12]
		f4 = 0x4;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_GPIO_EXTI_Callback+0x33c>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	701a      	strb	r2, [r3, #0]
			 	if ( adc_voltage[3] >= 0.2 || adc_voltage[3] <= 0.09  )
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	1c18      	adds	r0, r3, #0
 80014aa:	f7ff fd8b 	bl	8000fc4 <__aeabi_f2d>
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_GPIO_EXTI_Callback+0x320>)
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_GPIO_EXTI_Callback+0x324>)
 80014b2:	f7fe fee9 	bl	8000288 <__aeabi_dcmpge>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d10a      	bne.n	80014d0 <HAL_GPIO_EXTI_Callback+0x2e4>
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_GPIO_EXTI_Callback+0x318>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	1c18      	adds	r0, r3, #0
 80014c0:	f7ff fd80 	bl	8000fc4 <__aeabi_f2d>
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_GPIO_EXTI_Callback+0x328>)
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_GPIO_EXTI_Callback+0x32c>)
 80014c8:	f7fe feca 	bl	8000260 <__aeabi_dcmple>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_EXTI_Callback+0x2f2>
			 							f4 = (f4 | 0x1);
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_GPIO_EXTI_Callback+0x33c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_GPIO_EXTI_Callback+0x33c>)
 80014dc:	701a      	strb	r2, [r3, #0]
			 	T[3] = f4;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_GPIO_EXTI_Callback+0x33c>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_GPIO_EXTI_Callback+0x330>)
 80014e4:	70da      	strb	r2, [r3, #3]
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000028 	.word	0x20000028
 80014f4:	200000f4 	.word	0x200000f4
 80014f8:	66666666 	.word	0x66666666
 80014fc:	400a6666 	.word	0x400a6666
 8001500:	406fe000 	.word	0x406fe000
 8001504:	20000108 	.word	0x20000108
 8001508:	20000104 	.word	0x20000104
 800150c:	9999999a 	.word	0x9999999a
 8001510:	3fc99999 	.word	0x3fc99999
 8001514:	70a3d70a 	.word	0x70a3d70a
 8001518:	3fb70a3d 	.word	0x3fb70a3d
 800151c:	200000f0 	.word	0x200000f0
 8001520:	20000105 	.word	0x20000105
 8001524:	20000106 	.word	0x20000106
 8001528:	20000107 	.word	0x20000107

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f000 faa4 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 f818 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f000 f92e 	bl	8001798 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800153c:	f000 f8fc 	bl	8001738 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001540:	f000 f86c 	bl	800161c <MX_ADC_Init>
    /* USER CODE BEGIN 3 */

	  // MESSAGE TRASMIT


		HAL_UART_Transmit(&huart1, T, sizeof(T), HAL_MAX_DELAY);
 8001544:	2301      	movs	r3, #1
 8001546:	425b      	negs	r3, r3
 8001548:	4905      	ldr	r1, [pc, #20]	; (8001560 <main+0x34>)
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <main+0x38>)
 800154c:	2204      	movs	r2, #4
 800154e:	f002 f89b 	bl	8003688 <HAL_UART_Transmit>

	  	HAL_Delay(500);
 8001552:	23fa      	movs	r3, #250	; 0xfa
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	0018      	movs	r0, r3
 8001558:	f000 faf4 	bl	8001b44 <HAL_Delay>
		HAL_UART_Transmit(&huart1, T, sizeof(T), HAL_MAX_DELAY);
 800155c:	e7f2      	b.n	8001544 <main+0x18>
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	200000f0 	.word	0x200000f0
 8001564:	20000068 	.word	0x20000068

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	242c      	movs	r4, #44	; 0x2c
 8001570:	193b      	adds	r3, r7, r4
 8001572:	0018      	movs	r0, r3
 8001574:	2334      	movs	r3, #52	; 0x34
 8001576:	001a      	movs	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f002 fcfb 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157e:	231c      	movs	r3, #28
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	0018      	movs	r0, r3
 8001584:	2310      	movs	r3, #16
 8001586:	001a      	movs	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	f002 fcf3 	bl	8003f74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158e:	003b      	movs	r3, r7
 8001590:	0018      	movs	r0, r3
 8001592:	231c      	movs	r3, #28
 8001594:	001a      	movs	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	f002 fcec 	bl	8003f74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800159c:	0021      	movs	r1, r4
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2230      	movs	r2, #48	; 0x30
 80015a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2201      	movs	r2, #1
 80015a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2201      	movs	r2, #1
 80015ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2210      	movs	r2, #16
 80015b4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 fa1e 	bl	8002a00 <HAL_RCC_OscConfig>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80015c8:	f000 f92e 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	211c      	movs	r1, #28
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2203      	movs	r2, #3
 80015d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2101      	movs	r1, #1
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 fd8e 	bl	800310c <HAL_RCC_ClockConfig>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015f4:	f000 f918 	bl	8001828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f8:	003b      	movs	r3, r7
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015fe:	003b      	movs	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	003b      	movs	r3, r7
 8001606:	0018      	movs	r0, r3
 8001608:	f001 feec 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001610:	f000 f90a 	bl	8001828 <Error_Handler>
  }
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b019      	add	sp, #100	; 0x64
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	0018      	movs	r0, r3
 8001626:	230c      	movs	r3, #12
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f002 fca2 	bl	8003f74 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <MX_ADC_Init+0x114>)
 8001632:	4a40      	ldr	r2, [pc, #256]	; (8001734 <MX_ADC_Init+0x118>)
 8001634:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <MX_ADC_Init+0x114>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <MX_ADC_Init+0x114>)
 800163e:	2210      	movs	r2, #16
 8001640:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <MX_ADC_Init+0x114>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <MX_ADC_Init+0x114>)
 800164a:	2201      	movs	r2, #1
 800164c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <MX_ADC_Init+0x114>)
 8001650:	2204      	movs	r2, #4
 8001652:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <MX_ADC_Init+0x114>)
 8001656:	2200      	movs	r2, #0
 8001658:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <MX_ADC_Init+0x114>)
 800165c:	2200      	movs	r2, #0
 800165e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <MX_ADC_Init+0x114>)
 8001662:	2201      	movs	r2, #1
 8001664:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <MX_ADC_Init+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <MX_ADC_Init+0x114>)
 800166e:	22c2      	movs	r2, #194	; 0xc2
 8001670:	32ff      	adds	r2, #255	; 0xff
 8001672:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <MX_ADC_Init+0x114>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <MX_ADC_Init+0x114>)
 800167c:	2224      	movs	r2, #36	; 0x24
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <MX_ADC_Init+0x114>)
 8001684:	2201      	movs	r2, #1
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <MX_ADC_Init+0x114>)
 800168a:	0018      	movs	r0, r3
 800168c:	f000 fa7e 	bl	8001b8c <HAL_ADC_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 f8c8 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0152      	lsls	r2, r2, #5
 80016a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2203      	movs	r2, #3
 80016aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016ac:	1d3a      	adds	r2, r7, #4
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_ADC_Init+0x114>)
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fce2 	bl	800207c <HAL_ADC_ConfigChannel>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80016bc:	f000 f8b4 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016c6:	1d3a      	adds	r2, r7, #4
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_ADC_Init+0x114>)
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 fcd5 	bl	800207c <HAL_ADC_ConfigChannel>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d001      	beq.n	80016da <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80016d6:	f000 f8a7 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016e0:	1d3a      	adds	r2, r7, #4
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_ADC_Init+0x114>)
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 fcc8 	bl	800207c <HAL_ADC_ConfigChannel>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80016f0:	f000 f89a 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2203      	movs	r2, #3
 80016f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016fa:	1d3a      	adds	r2, r7, #4
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_ADC_Init+0x114>)
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f000 fcbb 	bl	800207c <HAL_ADC_ConfigChannel>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800170a:	f000 f88d 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2210      	movs	r2, #16
 8001712:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001714:	1d3a      	adds	r2, r7, #4
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_ADC_Init+0x114>)
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f000 fcae 	bl	800207c <HAL_ADC_ConfigChannel>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001724:	f000 f880 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000028 	.word	0x20000028
 8001734:	40012400 	.word	0x40012400

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <MX_USART1_UART_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001744:	2296      	movs	r2, #150	; 0x96
 8001746:	0192      	lsls	r2, r2, #6
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART1_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <MX_USART1_UART_Init+0x58>)
 800177c:	0018      	movs	r0, r3
 800177e:	f001 ff2f 	bl	80035e0 <HAL_UART_Init>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 f84f 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000068 	.word	0x20000068
 8001794:	40013800 	.word	0x40013800

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	240c      	movs	r4, #12
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	0018      	movs	r0, r3
 80017a4:	2314      	movs	r3, #20
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	f002 fbe3 	bl	8003f74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_GPIO_Init+0x88>)
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_GPIO_Init+0x88>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0309      	lsls	r1, r1, #12
 80017b8:	430a      	orrs	r2, r1
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_GPIO_Init+0x88>)
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_GPIO_Init+0x88>)
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_GPIO_Init+0x88>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0289      	lsls	r1, r1, #10
 80017d4:	430a      	orrs	r2, r1
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_GPIO_Init+0x88>)
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	22f0      	movs	r2, #240	; 0xf0
 80017ea:	0192      	lsls	r2, r2, #6
 80017ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	2288      	movs	r2, #136	; 0x88
 80017f2:	0352      	lsls	r2, r2, #13
 80017f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	2202      	movs	r2, #2
 80017fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <MX_GPIO_Init+0x8c>)
 8001800:	0019      	movs	r1, r3
 8001802:	0010      	movs	r0, r2
 8001804:	f000 ff68 	bl	80026d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2007      	movs	r0, #7
 800180e:	f000 ff31 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001812:	2007      	movs	r0, #7
 8001814:	f000 ff43 	bl	800269e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b009      	add	sp, #36	; 0x24
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_MspInit+0x54>)
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_MspInit+0x54>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_MspInit+0x54>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_MspInit+0x54>)
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_MspInit+0x54>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0549      	lsls	r1, r1, #21
 800185c:	430a      	orrs	r2, r1
 800185e:	61da      	str	r2, [r3, #28]
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_MspInit+0x54>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	055b      	lsls	r3, r3, #21
 8001868:	4013      	ands	r3, r2
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2004      	movs	r0, #4
 8001874:	f000 fefe 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8001878:	2004      	movs	r0, #4
 800187a:	f000 ff10 	bl	800269e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	2414      	movs	r4, #20
 8001896:	193b      	adds	r3, r7, r4
 8001898:	0018      	movs	r0, r3
 800189a:	2314      	movs	r3, #20
 800189c:	001a      	movs	r2, r3
 800189e:	2100      	movs	r1, #0
 80018a0:	f002 fb68 	bl	8003f74 <memset>
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_ADC_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12b      	bne.n	8001906 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0089      	lsls	r1, r1, #2
 80018b8:	430a      	orrs	r2, r1
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0289      	lsls	r1, r1, #10
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_ADC_MspInit+0x88>)
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	220f      	movs	r2, #15
 80018ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2203      	movs	r2, #3
 80018f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	193a      	adds	r2, r7, r4
 80018fa:	2390      	movs	r3, #144	; 0x90
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fee9 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b00b      	add	sp, #44	; 0x2c
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40012400 	.word	0x40012400
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	2414      	movs	r4, #20
 8001922:	193b      	adds	r3, r7, r4
 8001924:	0018      	movs	r0, r3
 8001926:	2314      	movs	r3, #20
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f002 fb22 	bl	8003f74 <memset>
  if(huart->Instance==USART1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_UART_MspInit+0x94>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d133      	bne.n	80019a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_UART_MspInit+0x98>)
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_UART_MspInit+0x98>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	01c9      	lsls	r1, r1, #7
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_UART_MspInit+0x98>)
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_UART_MspInit+0x98>)
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_MspInit+0x98>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0289      	lsls	r1, r1, #10
 8001960:	430a      	orrs	r2, r1
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_UART_MspInit+0x98>)
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	22c0      	movs	r2, #192	; 0xc0
 8001976:	00d2      	lsls	r2, r2, #3
 8001978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	0021      	movs	r1, r4
 800197c:	187b      	adds	r3, r7, r1
 800197e:	2202      	movs	r2, #2
 8001980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2203      	movs	r2, #3
 800198c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2201      	movs	r2, #1
 8001992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	187a      	adds	r2, r7, r1
 8001996:	2390      	movs	r3, #144	; 0x90
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f000 fe9b 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b00b      	add	sp, #44	; 0x2c
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40021000 	.word	0x40021000

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f898 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 ffe7 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 ffe2 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 ffdd 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 ffd8 	bl	80029c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a2c:	f7ff fff7 	bl	8001a1e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <LoopForever+0xe>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	; (8001a74 <LoopForever+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a56:	f002 fa69 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7ff fd67 	bl	800152c <main>

08001a5e <LoopForever>:

LoopForever:
    b LoopForever
 8001a5e:	e7fe      	b.n	8001a5e <LoopForever>
  ldr   r0, =_estack
 8001a60:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a6c:	0800405c 	.word	0x0800405c
  ldr r2, =_sbss
 8001a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a74:	2000011c 	.word	0x2000011c

08001a78 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_COMP_IRQHandler>
	...

08001a7c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_Init+0x24>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_Init+0x24>)
 8001a86:	2110      	movs	r1, #16
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f809 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a92:	f7ff fecf 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_InitTick+0x5c>)
 8001aae:	681c      	ldr	r4, [r3, #0]
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_InitTick+0x60>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	23fa      	movs	r3, #250	; 0xfa
 8001ab8:	0098      	lsls	r0, r3, #2
 8001aba:	f7fe fb25 	bl	8000108 <__udivsi3>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f7fe fb20 	bl	8000108 <__udivsi3>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fdf7 	bl	80026be <HAL_SYSTICK_Config>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e00f      	b.n	8001af8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d80b      	bhi.n	8001af6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 fdc4 	bl	8002674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_InitTick+0x64>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b003      	add	sp, #12
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x1c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	001a      	movs	r2, r3
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x20>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	18d2      	adds	r2, r2, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_IncTick+0x20>)
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000118 	.word	0x20000118

08001b30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_GetTick+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	20000118 	.word	0x20000118

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	001a      	movs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	189b      	adds	r3, r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	f7ff ffe0 	bl	8001b30 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e125      	b.n	8001df6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2234      	movs	r2, #52	; 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fe62 	bl	800188c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	2210      	movs	r2, #16
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d000      	beq.n	8001bd4 <HAL_ADC_Init+0x48>
 8001bd2:	e103      	b.n	8001ddc <HAL_ADC_Init+0x250>
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d000      	beq.n	8001be0 <HAL_ADC_Init+0x54>
 8001bde:	e0fd      	b.n	8001ddc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2204      	movs	r2, #4
 8001be8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001bea:	d000      	beq.n	8001bee <HAL_ADC_Init+0x62>
 8001bec:	e0f6      	b.n	8001ddc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a83      	ldr	r2, [pc, #524]	; (8001e00 <HAL_ADC_Init+0x274>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2203      	movs	r2, #3
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d112      	bne.n	8001c32 <HAL_ADC_Init+0xa6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d009      	beq.n	8001c2e <HAL_ADC_Init+0xa2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	401a      	ands	r2, r3
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0xa6>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_Init+0xa8>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d116      	bne.n	8001c66 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2218      	movs	r2, #24
 8001c40:	4393      	bics	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	0899      	lsrs	r1, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4964      	ldr	r1, [pc, #400]	; (8001e04 <HAL_ADC_Init+0x278>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7e1b      	ldrb	r3, [r3, #24]
 8001c7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e5b      	ldrb	r3, [r3, #25]
 8001c80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e9b      	ldrb	r3, [r3, #26]
 8001c88:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d002      	beq.n	8001c9a <HAL_ADC_Init+0x10e>
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	e000      	b.n	8001c9c <HAL_ADC_Init+0x110>
 8001c9a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c9c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ca2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_Init+0x124>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e000      	b.n	8001cb2 <HAL_ADC_Init+0x126>
 8001cb0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001cb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2124      	movs	r1, #36	; 0x24
 8001cb8:	5c5b      	ldrb	r3, [r3, r1]
 8001cba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cbc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7edb      	ldrb	r3, [r3, #27]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e9b      	ldrb	r3, [r3, #26]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	0252      	lsls	r2, r2, #9
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	e00b      	b.n	8001cf8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	23c2      	movs	r3, #194	; 0xc2
 8001cfe:	33ff      	adds	r3, #255	; 0xff
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d007      	beq.n	8001d14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d01b      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d017      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d013      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d00f      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00b      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d007      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d003      	beq.n	8001d68 <HAL_ADC_Init+0x1dc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b07      	cmp	r3, #7
 8001d66:	d112      	bne.n	8001d8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2107      	movs	r1, #7
 8001d74:	438a      	bics	r2, r1
 8001d76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6959      	ldr	r1, [r3, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	2207      	movs	r2, #7
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_ADC_Init+0x27c>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	2203      	movs	r2, #3
 8001daa:	4393      	bics	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001db4:	e01c      	b.n	8001df0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	2212      	movs	r2, #18
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001dda:	e009      	b.n	8001df0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	2210      	movs	r2, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001df0:	230f      	movs	r3, #15
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	fffffefd 	.word	0xfffffefd
 8001e04:	fffe0219 	.word	0xfffe0219
 8001e08:	833fffe7 	.word	0x833fffe7

08001e0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2204      	movs	r2, #4
 8001e24:	4013      	ands	r3, r2
 8001e26:	d138      	bne.n	8001e9a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2234      	movs	r2, #52	; 0x34
 8001e2c:	5c9b      	ldrb	r3, [r3, r2]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Start+0x2a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e038      	b.n	8001ea8 <HAL_ADC_Start+0x9c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2234      	movs	r2, #52	; 0x34
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e5b      	ldrb	r3, [r3, #25]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fc      	adds	r4, r7, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 fa23 	bl	8002298 <ADC_Enable>
 8001e52:	0003      	movs	r3, r0
 8001e54:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e56:	230f      	movs	r3, #15
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d120      	bne.n	8001ea2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_ADC_Start+0xa4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2234      	movs	r2, #52	; 0x34
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	221c      	movs	r2, #28
 8001e86:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2104      	movs	r1, #4
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b005      	add	sp, #20
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	fffff0fe 	.word	0xfffff0fe

08001eb4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2234      	movs	r2, #52	; 0x34
 8001ec8:	5c9b      	ldrb	r3, [r3, r2]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Stop+0x1e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e029      	b.n	8001f26 <HAL_ADC_Stop+0x72>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2234      	movs	r2, #52	; 0x34
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001eda:	250f      	movs	r5, #15
 8001edc:	197c      	adds	r4, r7, r5
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 face 	bl	8002482 <ADC_ConversionStop>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eea:	197b      	adds	r3, r7, r5
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d112      	bne.n	8001f18 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ef2:	197c      	adds	r4, r7, r5
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 fa52 	bl	80023a0 <ADC_Disable>
 8001efc:	0003      	movs	r3, r0
 8001efe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f00:	197b      	adds	r3, r7, r5
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_ADC_Stop+0x7c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2201      	movs	r2, #1
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2234      	movs	r2, #52	; 0x34
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f20:	230f      	movs	r3, #15
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	fffffefe 	.word	0xfffffefe

08001f34 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d102      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f46:	2308      	movs	r3, #8
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e014      	b.n	8001f76 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10b      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	2220      	movs	r2, #32
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2234      	movs	r2, #52	; 0x34
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e071      	b.n	8002056 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f72:	230c      	movs	r3, #12
 8001f74:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f76:	f7ff fddb 	bl	8001b30 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f7e:	e01f      	b.n	8001fc0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x68>
 8001f8c:	f7ff fdd0 	bl	8001b30 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d211      	bcs.n	8001fc0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	2204      	movs	r2, #4
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2234      	movs	r2, #52	; 0x34
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e04a      	b.n	8002056 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0d9      	beq.n	8001f80 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d12d      	bne.n	8002044 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d129      	bne.n	8002044 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d122      	bne.n	8002044 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2204      	movs	r2, #4
 8002006:	4013      	ands	r3, r2
 8002008:	d110      	bne.n	800202c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	210c      	movs	r1, #12
 8002016:	438a      	bics	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_ADC_PollForConversion+0x12c>)
 8002020:	4013      	ands	r3, r2
 8002022:	2201      	movs	r2, #1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
 800202a:	e00b      	b.n	8002044 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	2220      	movs	r2, #32
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	2201      	movs	r2, #1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	220c      	movs	r2, #12
 8002052:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	fffffefe 	.word	0xfffffefe

08002064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	230f      	movs	r3, #15
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	055b      	lsls	r3, r3, #21
 800209a:	429a      	cmp	r2, r3
 800209c:	d011      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x46>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d00d      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x46>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d009      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x46>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d005      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x46>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d001      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x46>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2234      	movs	r2, #52	; 0x34
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x54>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0d0      	b.n	8002272 <HAL_ADC_ConfigChannel+0x1f6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2234      	movs	r2, #52	; 0x34
 80020d4:	2101      	movs	r1, #1
 80020d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2204      	movs	r2, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d000      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x6a>
 80020e4:	e0b4      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a64      	ldr	r2, [pc, #400]	; (800227c <HAL_ADC_ConfigChannel+0x200>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x76>
 80020f0:	e082      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	409a      	lsls	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	055b      	lsls	r3, r3, #21
 8002110:	429a      	cmp	r2, r3
 8002112:	d037      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d033      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b02      	cmp	r3, #2
 8002122:	d02f      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	2b03      	cmp	r3, #3
 800212a:	d02b      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b04      	cmp	r3, #4
 8002132:	d027      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	2b05      	cmp	r3, #5
 800213a:	d023      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b06      	cmp	r3, #6
 8002142:	d01f      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b07      	cmp	r3, #7
 800214a:	d01b      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2107      	movs	r1, #7
 8002158:	400b      	ands	r3, r1
 800215a:	429a      	cmp	r2, r3
 800215c:	d012      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2107      	movs	r1, #7
 800216a:	438a      	bics	r2, r1
 800216c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6959      	ldr	r1, [r3, #20]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2207      	movs	r2, #7
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d007      	beq.n	800219c <HAL_ADC_ConfigChannel+0x120>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b11      	cmp	r3, #17
 8002192:	d003      	beq.n	800219c <HAL_ADC_ConfigChannel+0x120>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b12      	cmp	r3, #18
 800219a:	d163      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_ADC_ConfigChannel+0x204>)
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d009      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x140>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b11      	cmp	r3, #17
 80021ae:	d102      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x13a>
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	03db      	lsls	r3, r3, #15
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x144>
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	045b      	lsls	r3, r3, #17
 80021ba:	e001      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x144>
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_ADC_ConfigChannel+0x204>)
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d14a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_ADC_ConfigChannel+0x208>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	492d      	ldr	r1, [pc, #180]	; (8002288 <HAL_ADC_ConfigChannel+0x20c>)
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fd ff97 	bl	8000108 <__udivsi3>
 80021da:	0003      	movs	r3, r0
 80021dc:	001a      	movs	r2, r3
 80021de:	0013      	movs	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	189b      	adds	r3, r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x16e>
 80021f6:	e035      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	4099      	lsls	r1, r3
 8002206:	000b      	movs	r3, r1
 8002208:	43d9      	mvns	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d007      	beq.n	800222a <HAL_ADC_ConfigChannel+0x1ae>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b11      	cmp	r3, #17
 8002220:	d003      	beq.n	800222a <HAL_ADC_ConfigChannel+0x1ae>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b12      	cmp	r3, #18
 8002228:	d11c      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_ADC_ConfigChannel+0x204>)
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b10      	cmp	r3, #16
 8002234:	d007      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x1ca>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b11      	cmp	r3, #17
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x1c6>
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_ADC_ConfigChannel+0x210>)
 8002240:	e002      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1cc>
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_ADC_ConfigChannel+0x214>)
 8002244:	e000      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1cc>
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_ADC_ConfigChannel+0x218>)
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_ADC_ConfigChannel+0x204>)
 800224a:	400b      	ands	r3, r1
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e009      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	2220      	movs	r2, #32
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2234      	movs	r2, #52	; 0x34
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	00001001 	.word	0x00001001
 8002280:	40012708 	.word	0x40012708
 8002284:	20000000 	.word	0x20000000
 8002288:	000f4240 	.word	0x000f4240
 800228c:	ffbfffff 	.word	0xffbfffff
 8002290:	feffffff 	.word	0xfeffffff
 8002294:	ff7fffff 	.word	0xff7fffff

08002298 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2203      	movs	r2, #3
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d112      	bne.n	80022dc <ADC_Enable+0x44>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d009      	beq.n	80022d8 <ADC_Enable+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	401a      	ands	r2, r3
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d101      	bne.n	80022dc <ADC_Enable+0x44>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <ADC_Enable+0x46>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d152      	bne.n	8002388 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <ADC_Enable+0xfc>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	d00d      	beq.n	800230a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2210      	movs	r2, #16
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2201      	movs	r2, #1
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03f      	b.n	800238a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <ADC_Enable+0x100>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	491f      	ldr	r1, [pc, #124]	; (800239c <ADC_Enable+0x104>)
 8002320:	0018      	movs	r0, r3
 8002322:	f7fd fef1 	bl	8000108 <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800232a:	e002      	b.n	8002332 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3b01      	subs	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f9      	bne.n	800232c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002338:	f7ff fbfa 	bl	8001b30 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002340:	e01b      	b.n	800237a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002342:	f7ff fbf5 	bl	8001b30 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d914      	bls.n	800237a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	2b01      	cmp	r3, #1
 800235c:	d00d      	beq.n	800237a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	2210      	movs	r2, #16
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2201      	movs	r2, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	2b01      	cmp	r3, #1
 8002386:	d1dc      	bne.n	8002342 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	80000017 	.word	0x80000017
 8002398:	20000000 	.word	0x20000000
 800239c:	000f4240 	.word	0x000f4240

080023a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2203      	movs	r2, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d112      	bne.n	80023e0 <ADC_Disable+0x40>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d009      	beq.n	80023dc <ADC_Disable+0x3c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	401a      	ands	r2, r3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	429a      	cmp	r2, r3
 80023da:	d101      	bne.n	80023e0 <ADC_Disable+0x40>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <ADC_Disable+0x42>
 80023e0:	2300      	movs	r3, #0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d048      	beq.n	8002478 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2205      	movs	r2, #5
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d110      	bne.n	8002416 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2102      	movs	r1, #2
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2203      	movs	r2, #3
 800240a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800240c:	f7ff fb90 	bl	8001b30 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002414:	e029      	b.n	800246a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	2210      	movs	r2, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	2201      	movs	r2, #1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e023      	b.n	800247a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002432:	f7ff fb7d 	bl	8001b30 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d914      	bls.n	800246a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10d      	bne.n	800246a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	2210      	movs	r2, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2201      	movs	r2, #1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e007      	b.n	800247a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	2b01      	cmp	r3, #1
 8002476:	d0dc      	beq.n	8002432 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2204      	movs	r2, #4
 8002496:	4013      	ands	r3, r2
 8002498:	d03a      	beq.n	8002510 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d10d      	bne.n	80024c4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80024b2:	d107      	bne.n	80024c4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2110      	movs	r1, #16
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fb34 	bl	8001b30 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80024cc:	e01a      	b.n	8002504 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80024ce:	f7ff fb2f 	bl	8001b30 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d913      	bls.n	8002504 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2204      	movs	r2, #4
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00d      	beq.n	8002504 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	2210      	movs	r2, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	2201      	movs	r2, #1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e006      	b.n	8002512 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d1de      	bne.n	80024ce <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	d809      	bhi.n	8002544 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	231f      	movs	r3, #31
 8002538:	401a      	ands	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_EnableIRQ+0x30>)
 800253c:	2101      	movs	r1, #1
 800253e:	4091      	lsls	r1, r2
 8002540:	000a      	movs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
  }
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b7f      	cmp	r3, #127	; 0x7f
 8002564:	d828      	bhi.n	80025b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002566:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <__NVIC_SetPriority+0xd4>)
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	33c0      	adds	r3, #192	; 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	1dfa      	adds	r2, r7, #7
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	0011      	movs	r1, r2
 800257c:	2203      	movs	r2, #3
 800257e:	400a      	ands	r2, r1
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	21ff      	movs	r1, #255	; 0xff
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d2      	mvns	r2, r2
 800258a:	401a      	ands	r2, r3
 800258c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	401a      	ands	r2, r3
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	2303      	movs	r3, #3
 800259e:	4003      	ands	r3, r0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	481f      	ldr	r0, [pc, #124]	; (8002624 <__NVIC_SetPriority+0xd4>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	33c0      	adds	r3, #192	; 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025b6:	e031      	b.n	800261c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <__NVIC_SetPriority+0xd8>)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0019      	movs	r1, r3
 80025c0:	230f      	movs	r3, #15
 80025c2:	400b      	ands	r3, r1
 80025c4:	3b08      	subs	r3, #8
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3306      	adds	r3, #6
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	; 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <__NVIC_SetPriority+0xd8>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	001c      	movs	r4, r3
 8002608:	230f      	movs	r3, #15
 800260a:	4023      	ands	r3, r4
 800260c:	3b08      	subs	r3, #8
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	3306      	adds	r3, #6
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18c3      	adds	r3, r0, r3
 8002618:	3304      	adds	r3, #4
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b003      	add	sp, #12
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	045b      	lsls	r3, r3, #17
 800263c:	429a      	cmp	r2, r3
 800263e:	d301      	bcc.n	8002644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002640:	2301      	movs	r3, #1
 8002642:	e010      	b.n	8002666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <SysTick_Config+0x44>)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3a01      	subs	r2, #1
 800264a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264c:	2301      	movs	r3, #1
 800264e:	425b      	negs	r3, r3
 8002650:	2103      	movs	r1, #3
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ff7c 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x44>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x44>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	210f      	movs	r1, #15
 8002680:	187b      	adds	r3, r7, r1
 8002682:	1c02      	adds	r2, r0, #0
 8002684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	187b      	adds	r3, r7, r1
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	0002      	movs	r2, r0
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff ff33 	bl	800251c <__NVIC_EnableIRQ>
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ffaf 	bl	800262c <SysTick_Config>
 80026ce:	0003      	movs	r3, r0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e6:	e155      	b.n	8002994 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4091      	lsls	r1, r2
 80026f2:	000a      	movs	r2, r1
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d100      	bne.n	8002700 <HAL_GPIO_Init+0x28>
 80026fe:	e146      	b.n	800298e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	4013      	ands	r3, r2
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	409a      	lsls	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	43da      	mvns	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	0013      	movs	r3, r2
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
 8002754:	0013      	movs	r3, r2
 8002756:	43da      	mvns	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	2201      	movs	r2, #1
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	43da      	mvns	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	58d3      	ldr	r3, [r2, r3]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2207      	movs	r2, #7
 80027d4:	4013      	ands	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2107      	movs	r1, #7
 80027ee:	400b      	ands	r3, r1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	401a      	ands	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	23c0      	movs	r3, #192	; 0xc0
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	4013      	ands	r3, r2
 8002848:	d100      	bne.n	800284c <HAL_GPIO_Init+0x174>
 800284a:	e0a0      	b.n	800298e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284c:	4b57      	ldr	r3, [pc, #348]	; (80029ac <HAL_GPIO_Init+0x2d4>)
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_GPIO_Init+0x2d4>)
 8002852:	2101      	movs	r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_GPIO_Init+0x2d4>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_GPIO_Init+0x2d8>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	589b      	ldr	r3, [r3, r2]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	43da      	mvns	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2390      	movs	r3, #144	; 0x90
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	429a      	cmp	r2, r3
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x1ee>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x1ea>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a46      	ldr	r2, [pc, #280]	; (80029b8 <HAL_GPIO_Init+0x2e0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x1e6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a45      	ldr	r2, [pc, #276]	; (80029bc <HAL_GPIO_Init+0x2e4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x1e2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <HAL_GPIO_Init+0x2e8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x1de>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028c6:	2300      	movs	r3, #0
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	2103      	movs	r1, #3
 80028cc:	400a      	ands	r2, r1
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d8:	4935      	ldr	r1, [pc, #212]	; (80029b0 <HAL_GPIO_Init+0x2d8>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	035b      	lsls	r3, r3, #13
 80028fe:	4013      	ands	r3, r2
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43da      	mvns	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	039b      	lsls	r3, r3, #14
 8002928:	4013      	ands	r3, r2
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43da      	mvns	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	4013      	ands	r3, r2
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	40da      	lsrs	r2, r3
 800299c:	1e13      	subs	r3, r2, #0
 800299e:	d000      	beq.n	80029a2 <HAL_GPIO_Init+0x2ca>
 80029a0:	e6a2      	b.n	80026e8 <HAL_GPIO_Init+0x10>
  } 
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000
 80029b4:	48000400 	.word	0x48000400
 80029b8:	48000800 	.word	0x48000800
 80029bc:	48000c00 	.word	0x48000c00
 80029c0:	48001000 	.word	0x48001000
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dbb      	adds	r3, r7, #6
 80029d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	1dba      	adds	r2, r7, #6
 80029da:	8812      	ldrh	r2, [r2, #0]
 80029dc:	4013      	ands	r3, r2
 80029de:	d008      	beq.n	80029f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	8812      	ldrh	r2, [r2, #0]
 80029e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fe fbfd 	bl	80011ec <HAL_GPIO_EXTI_Callback>
  }
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b002      	add	sp, #8
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 fb76 	bl	8003100 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x20>
 8002a1e:	e08e      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a20:	4bc5      	ldr	r3, [pc, #788]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	220c      	movs	r2, #12
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d00e      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a2c:	4bc2      	ldr	r3, [pc, #776]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	220c      	movs	r2, #12
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d117      	bne.n	8002a68 <HAL_RCC_OscConfig+0x68>
 8002a38:	4bbf      	ldr	r3, [pc, #764]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	23c0      	movs	r3, #192	; 0xc0
 8002a3e:	025b      	lsls	r3, r3, #9
 8002a40:	401a      	ands	r2, r3
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	025b      	lsls	r3, r3, #9
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10e      	bne.n	8002a68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	4bbb      	ldr	r3, [pc, #748]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	4013      	ands	r3, r2
 8002a54:	d100      	bne.n	8002a58 <HAL_RCC_OscConfig+0x58>
 8002a56:	e071      	b.n	8002b3c <HAL_RCC_OscConfig+0x13c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d000      	beq.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a60:	e06c      	b.n	8002b3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f000 fb4c 	bl	8003100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x80>
 8002a70:	4bb1      	ldr	r3, [pc, #708]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4bb0      	ldr	r3, [pc, #704]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	0249      	lsls	r1, r1, #9
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e02f      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xa2>
 8002a88:	4bab      	ldr	r3, [pc, #684]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4baa      	ldr	r3, [pc, #680]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a8e:	49ab      	ldr	r1, [pc, #684]	; (8002d3c <HAL_RCC_OscConfig+0x33c>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	4ba8      	ldr	r3, [pc, #672]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4ba7      	ldr	r3, [pc, #668]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a9a:	49a9      	ldr	r1, [pc, #676]	; (8002d40 <HAL_RCC_OscConfig+0x340>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e01e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xc8>
 8002aaa:	4ba3      	ldr	r3, [pc, #652]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4ba2      	ldr	r3, [pc, #648]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	02c9      	lsls	r1, r1, #11
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	4b9f      	ldr	r3, [pc, #636]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b9e      	ldr	r3, [pc, #632]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0249      	lsls	r1, r1, #9
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002ac8:	4b9b      	ldr	r3, [pc, #620]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b9a      	ldr	r3, [pc, #616]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ace:	499b      	ldr	r1, [pc, #620]	; (8002d3c <HAL_RCC_OscConfig+0x33c>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4b98      	ldr	r3, [pc, #608]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b97      	ldr	r3, [pc, #604]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ada:	4999      	ldr	r1, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x340>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff f822 	bl	8001b30 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af2:	f7ff f81d 	bl	8001b30 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e2fd      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0xf2>
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff f80d 	bl	8001b30 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f808 	bl	8001b30 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e2e8      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x11c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCC_OscConfig+0x14a>
 8002b48:	e06c      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4013      	ands	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	220c      	movs	r2, #12
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11f      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1a0>
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	23c0      	movs	r3, #192	; 0xc0
 8002b66:	025b      	lsls	r3, r3, #9
 8002b68:	401a      	ands	r2, r3
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b71      	ldr	r3, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e2bb      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22f8      	movs	r2, #248	; 0xf8
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00da      	lsls	r2, r3, #3
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e041      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d024      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ffbc 	bl	8001b30 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe ffb7 	bl	8001b30 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e297      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d0f1      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	22f8      	movs	r2, #248	; 0xf8
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00da      	lsls	r2, r3, #3
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e018      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe ff97 	bl	8001b30 <HAL_GetTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe ff92 	bl	8001b30 <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e272      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d1f1      	bne.n	8002c08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d036      	beq.n	8002c9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d019      	beq.n	8002c6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe ff75 	bl	8001b30 <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe ff70 	bl	8001b30 <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e250      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d0f1      	beq.n	8002c4c <HAL_RCC_OscConfig+0x24c>
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe ff5b 	bl	8001b30 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe ff56 	bl	8001b30 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e236      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d1f1      	bne.n	8002c80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d100      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
 8002ca6:	e0b5      	b.n	8002e14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca8:	201f      	movs	r0, #31
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	055b      	lsls	r3, r3, #21
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d110      	bne.n	8002cde <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0549      	lsls	r1, r1, #21
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cd8:	183b      	adds	r3, r7, r0
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d11a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0049      	lsls	r1, r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf8:	f7fe ff1a 	bl	8001b30 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe ff15 	bl	8001b30 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1f5      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10f      	bne.n	8002d48 <HAL_RCC_OscConfig+0x348>
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	430a      	orrs	r2, r1
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e036      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	fffeffff 	.word	0xfffeffff
 8002d40:	fffbffff 	.word	0xfffbffff
 8002d44:	40007000 	.word	0x40007000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x36a>
 8002d50:	4bca      	ldr	r3, [pc, #808]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4bc9      	ldr	r3, [pc, #804]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	438a      	bics	r2, r1
 8002d5a:	621a      	str	r2, [r3, #32]
 8002d5c:	4bc7      	ldr	r3, [pc, #796]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	4bc6      	ldr	r3, [pc, #792]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d62:	2104      	movs	r1, #4
 8002d64:	438a      	bics	r2, r1
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x38c>
 8002d72:	4bc2      	ldr	r3, [pc, #776]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	4bc1      	ldr	r3, [pc, #772]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d78:	2104      	movs	r1, #4
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	621a      	str	r2, [r3, #32]
 8002d7e:	4bbf      	ldr	r3, [pc, #764]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	4bbe      	ldr	r3, [pc, #760]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	621a      	str	r2, [r3, #32]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d8c:	4bbb      	ldr	r3, [pc, #748]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4bba      	ldr	r3, [pc, #744]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
 8002d98:	4bb8      	ldr	r3, [pc, #736]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4bb7      	ldr	r3, [pc, #732]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	438a      	bics	r2, r1
 8002da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d014      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fec0 	bl	8001b30 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe febb 	bl	8001b30 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4aaf      	ldr	r2, [pc, #700]	; (8003080 <HAL_RCC_OscConfig+0x680>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e19a      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4bac      	ldr	r3, [pc, #688]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3b6>
 8002dd4:	e013      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe feab 	bl	8001b30 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	e009      	b.n	8002df4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7fe fea6 	bl	8001b30 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	4aa5      	ldr	r2, [pc, #660]	; (8003080 <HAL_RCC_OscConfig+0x680>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e185      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4ba1      	ldr	r3, [pc, #644]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b9c      	ldr	r3, [pc, #624]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	4b9b      	ldr	r3, [pc, #620]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	499d      	ldr	r1, [pc, #628]	; (8003084 <HAL_RCC_OscConfig+0x684>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d12a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e26:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e32:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e36:	4b91      	ldr	r3, [pc, #580]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fe77 	bl	8001b30 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e48:	f7fe fe72 	bl	8001b30 <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e152      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4013      	ands	r3, r2
 8002e62:	d0f1      	beq.n	8002e48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	22f8      	movs	r2, #248	; 0xf8
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7a:	e034      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	3305      	adds	r3, #5
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e84:	4b7d      	ldr	r3, [pc, #500]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e90:	4b7a      	ldr	r3, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	22f8      	movs	r2, #248	; 0xf8
 8002e96:	4393      	bics	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	00da      	lsls	r2, r3, #3
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea6:	e01e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ea8:	4b74      	ldr	r3, [pc, #464]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eae:	2104      	movs	r1, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002eb4:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb8:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fe36 	bl	8001b30 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eca:	f7fe fe31 	bl	8001b30 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e111      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f1      	bne.n	8002eca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	4013      	ands	r3, r2
 8002eee:	d05c      	beq.n	8002faa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ef0:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d00e      	beq.n	8002f1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002efc:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	220c      	movs	r2, #12
 8002f02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d114      	bne.n	8002f32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f08:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	23c0      	movs	r3, #192	; 0xc0
 8002f0e:	025b      	lsls	r3, r3, #9
 8002f10:	401a      	ands	r2, r3
 8002f12:	23c0      	movs	r3, #192	; 0xc0
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	029b      	lsls	r3, r3, #10
 8002f22:	4013      	ands	r3, r2
 8002f24:	d040      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x5a8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d03c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e6      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	0249      	lsls	r1, r1, #9
 8002f44:	430a      	orrs	r2, r1
 8002f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fdf2 	bl	8001b30 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f52:	f7fe fded 	bl	8001b30 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0cd      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x552>
 8002f70:	e01b      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f78:	4943      	ldr	r1, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x688>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fdd7 	bl	8001b30 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f88:	f7fe fdd2 	bl	8001b30 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0b2      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x588>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fa8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d100      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
 8002fb2:	e0a4      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5c2>
 8002fc0:	e078      	b.n	80030b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d14c      	bne.n	8003064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fd0:	492e      	ldr	r1, [pc, #184]	; (800308c <HAL_RCC_OscConfig+0x68c>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fdab 	bl	8001b30 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe fda6 	bl	8001b30 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e086      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	049b      	lsls	r3, r3, #18
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	220f      	movs	r2, #15
 8003004:	4393      	bics	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_RCC_OscConfig+0x690>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	431a      	orrs	r2, r3
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	0449      	lsls	r1, r1, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe fd79 	bl	8001b30 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fd74 	bl	8001b30 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e054      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	049b      	lsls	r3, r3, #18
 800305e:	4013      	ands	r3, r2
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x644>
 8003062:	e04c      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <HAL_RCC_OscConfig+0x68c>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fd5e 	bl	8001b30 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x6a6>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000
 8003080:	00001388 	.word	0x00001388
 8003084:	efffffff 	.word	0xefffffff
 8003088:	fffeffff 	.word	0xfffeffff
 800308c:	feffffff 	.word	0xfeffffff
 8003090:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe fd4c 	bl	8001b30 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e02c      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	049b      	lsls	r3, r3, #18
 80030ae:	4013      	ands	r3, r2
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x694>
 80030b2:	e024      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01f      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	23c0      	movs	r3, #192	; 0xc0
 80030d0:	025b      	lsls	r3, r3, #9
 80030d2:	401a      	ands	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	429a      	cmp	r2, r3
 80030da:	d10e      	bne.n	80030fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	220f      	movs	r2, #15
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	23f0      	movs	r3, #240	; 0xf0
 80030ee:	039b      	lsls	r3, r3, #14
 80030f0:	401a      	ands	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b008      	add	sp, #32
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0bf      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d911      	bls.n	8003152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0a6      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d015      	beq.n	8003188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	d006      	beq.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800316c:	21e0      	movs	r1, #224	; 0xe0
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	22f0      	movs	r2, #240	; 0xf0
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d04c      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	029b      	lsls	r3, r3, #10
 80031a2:	4013      	ands	r3, r2
 80031a4:	d120      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07a      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	049b      	lsls	r3, r3, #18
 80031ba:	4013      	ands	r3, r2
 80031bc:	d114      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06e      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e062      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e05b      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	4393      	bics	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fc98 	bl	8001b30 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	e009      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003206:	f7fe fc93 	bl	8001b30 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_RCC_ClockConfig+0x1a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e042      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	220c      	movs	r2, #12
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ec      	bne.n	8003206 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d211      	bcs.n	800325e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	4393      	bics	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e020      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_RCC_ClockConfig+0x1a8>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800327c:	f000 f820 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003280:	0001      	movs	r1, r0
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	220f      	movs	r2, #15
 800328a:	4013      	ands	r3, r2
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1ac>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	000a      	movs	r2, r1
 8003292:	40da      	lsrs	r2, r3
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003298:	2003      	movs	r0, #3
 800329a:	f7fe fc03 	bl	8001aa4 <HAL_InitTick>
  
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	00001388 	.word	0x00001388
 80032b4:	fffff8ff 	.word	0xfffff8ff
 80032b8:	0800401c 	.word	0x0800401c
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	220c      	movs	r2, #12
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d046      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xb8>
 80032ea:	d848      	bhi.n	800337e <HAL_RCC_GetSysClockFreq+0xbe>
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d002      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x36>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d003      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x3c>
 80032f4:	e043      	b.n	800337e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032f8:	613b      	str	r3, [r7, #16]
      break;
 80032fa:	e043      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0c9b      	lsrs	r3, r3, #18
 8003300:	220f      	movs	r2, #15
 8003302:	4013      	ands	r3, r2
 8003304:	4a24      	ldr	r2, [pc, #144]	; (8003398 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003306:	5cd3      	ldrb	r3, [r2, r3]
 8003308:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCC_GetSysClockFreq+0xd0>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	220f      	movs	r2, #15
 8003310:	4013      	ands	r3, r2
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	23c0      	movs	r3, #192	; 0xc0
 800331c:	025b      	lsls	r3, r3, #9
 800331e:	401a      	ands	r2, r3
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	025b      	lsls	r3, r3, #9
 8003324:	429a      	cmp	r2, r3
 8003326:	d109      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	481a      	ldr	r0, [pc, #104]	; (8003394 <HAL_RCC_GetSysClockFreq+0xd4>)
 800332c:	f7fc feec 	bl	8000108 <__udivsi3>
 8003330:	0003      	movs	r3, r0
 8003332:	001a      	movs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4353      	muls	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e01a      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	23c0      	movs	r3, #192	; 0xc0
 8003340:	025b      	lsls	r3, r3, #9
 8003342:	401a      	ands	r2, r3
 8003344:	23c0      	movs	r3, #192	; 0xc0
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	429a      	cmp	r2, r3
 800334a:	d109      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4814      	ldr	r0, [pc, #80]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003350:	f7fc feda 	bl	8000108 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	001a      	movs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4353      	muls	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e008      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003364:	f7fc fed0 	bl	8000108 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	001a      	movs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4353      	muls	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	613b      	str	r3, [r7, #16]
      break;
 8003376:	e005      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	e002      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003380:	613b      	str	r3, [r7, #16]
      break;
 8003382:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003384:	693b      	ldr	r3, [r7, #16]
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b006      	add	sp, #24
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	40021000 	.word	0x40021000
 8003394:	007a1200 	.word	0x007a1200
 8003398:	08004034 	.word	0x08004034
 800339c:	08004044 	.word	0x08004044
 80033a0:	02dc6c00 	.word	0x02dc6c00

080033a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033bc:	f7ff fff2 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033c0:	0001      	movs	r1, r0
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	2207      	movs	r2, #7
 80033ca:	4013      	ands	r3, r2
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	40d9      	lsrs	r1, r3
 80033d2:	000b      	movs	r3, r1
}    
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40021000 	.word	0x40021000
 80033e0:	0800402c 	.word	0x0800402c

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	025b      	lsls	r3, r3, #9
 80033fc:	4013      	ands	r3, r2
 80033fe:	d100      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003400:	e08e      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2017      	movs	r0, #23
 8003404:	183b      	adds	r3, r7, r0
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	055b      	lsls	r3, r3, #21
 8003412:	4013      	ands	r3, r2
 8003414:	d110      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0549      	lsls	r1, r1, #21
 8003420:	430a      	orrs	r2, r1
 8003422:	61da      	str	r2, [r3, #28]
 8003424:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	183b      	adds	r3, r7, r0
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4013      	ands	r3, r2
 8003442:	d11a      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003444:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	0049      	lsls	r1, r1, #1
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe fb6d 	bl	8001b30 <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	e008      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7fe fb68 	bl	8001b30 <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0a6      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4013      	ands	r3, r2
 8003478:	d0f0      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800347a:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	23c0      	movs	r3, #192	; 0xc0
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d034      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	23c0      	movs	r3, #192	; 0xc0
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4013      	ands	r3, r2
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d02c      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	0249      	lsls	r1, r1, #9
 80034b0:	430a      	orrs	r2, r1
 80034b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ba:	4945      	ldr	r1, [pc, #276]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034bc:	400a      	ands	r2, r1
 80034be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fb2f 	bl	8001b30 <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e009      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe fb2a 	bl	8001b30 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e067      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003506:	430a      	orrs	r2, r1
 8003508:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800350a:	2317      	movs	r3, #23
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800351a:	492f      	ldr	r1, [pc, #188]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800351c:	400a      	ands	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	2203      	movs	r2, #3
 8003530:	4393      	bics	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800353a:	430a      	orrs	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2202      	movs	r2, #2
 8003544:	4013      	ands	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003558:	430a      	orrs	r2, r1
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2220      	movs	r2, #32
 8003562:	4013      	ands	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	2210      	movs	r2, #16
 800356c:	4393      	bics	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003576:	430a      	orrs	r2, r1
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	029b      	lsls	r3, r3, #10
 8003582:	4013      	ands	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	2280      	movs	r2, #128	; 0x80
 800358c:	4393      	bics	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003596:	430a      	orrs	r2, r1
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035b6:	430a      	orrs	r2, r1
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b006      	add	sp, #24
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40007000 	.word	0x40007000
 80035cc:	fffffcff 	.word	0xfffffcff
 80035d0:	fffeffff 	.word	0xfffeffff
 80035d4:	00001388 	.word	0x00001388
 80035d8:	efffffff 	.word	0xefffffff
 80035dc:	fffcffff 	.word	0xfffcffff

080035e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e044      	b.n	800367c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2278      	movs	r2, #120	; 0x78
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f7fe f987 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2224      	movs	r2, #36	; 0x24
 800360e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2101      	movs	r1, #1
 800361c:	438a      	bics	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f8d0 	bl	80037c8 <UART_SetConfig>
 8003628:	0003      	movs	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e024      	b.n	800367c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fa4b 	bl	8003ad8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <HAL_UART_Init+0xa4>)
 800364e:	400a      	ands	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	212a      	movs	r1, #42	; 0x2a
 800365e:	438a      	bics	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fae3 	bl	8003c40 <UART_CheckIdleState>
 800367a:	0003      	movs	r3, r0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}
 8003684:	ffffb7ff 	.word	0xffffb7ff

08003688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	1dbb      	adds	r3, r7, #6
 8003696:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369c:	2b20      	cmp	r3, #32
 800369e:	d000      	beq.n	80036a2 <HAL_UART_Transmit+0x1a>
 80036a0:	e08d      	b.n	80037be <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_UART_Transmit+0x28>
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e085      	b.n	80037c0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	429a      	cmp	r2, r3
 80036be:	d109      	bne.n	80036d4 <HAL_UART_Transmit+0x4c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	d001      	beq.n	80036d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e075      	b.n	80037c0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2284      	movs	r2, #132	; 0x84
 80036d8:	2100      	movs	r1, #0
 80036da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	; 0x21
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fe fa25 	bl	8001b30 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1dba      	adds	r2, r7, #6
 80036ee:	2150      	movs	r1, #80	; 0x50
 80036f0:	8812      	ldrh	r2, [r2, #0]
 80036f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1dba      	adds	r2, r7, #6
 80036f8:	2152      	movs	r1, #82	; 0x52
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	015b      	lsls	r3, r3, #5
 8003706:	429a      	cmp	r2, r3
 8003708:	d108      	bne.n	800371c <HAL_UART_Transmit+0x94>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e003      	b.n	8003724 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003724:	e030      	b.n	8003788 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	0013      	movs	r3, r2
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	f000 fb2c 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d004      	beq.n	8003746 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e03c      	b.n	80037c0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	05d2      	lsls	r2, r2, #23
 8003756:	0dd2      	lsrs	r2, r2, #23
 8003758:	b292      	uxth	r2, r2
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	3302      	adds	r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e008      	b.n	8003776 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b292      	uxth	r2, r2
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	3301      	adds	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2252      	movs	r2, #82	; 0x52
 800377a:	5a9b      	ldrh	r3, [r3, r2]
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b299      	uxth	r1, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2252      	movs	r2, #82	; 0x52
 8003786:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2252      	movs	r2, #82	; 0x52
 800378c:	5a9b      	ldrh	r3, [r3, r2]
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1c8      	bne.n	8003726 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	0013      	movs	r3, r2
 800379e:	2200      	movs	r2, #0
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	f000 faf5 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e005      	b.n	80037c0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b008      	add	sp, #32
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d0:	231e      	movs	r3, #30
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4aaf      	ldr	r2, [pc, #700]	; (8003ab4 <UART_SetConfig+0x2ec>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4aaa      	ldr	r2, [pc, #680]	; (8003ab8 <UART_SetConfig+0x2f0>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4aa1      	ldr	r2, [pc, #644]	; (8003abc <UART_SetConfig+0x2f4>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a9d      	ldr	r2, [pc, #628]	; (8003ac0 <UART_SetConfig+0x2f8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d127      	bne.n	800389e <UART_SetConfig+0xd6>
 800384e:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <UART_SetConfig+0x2fc>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2203      	movs	r2, #3
 8003854:	4013      	ands	r3, r2
 8003856:	2b03      	cmp	r3, #3
 8003858:	d00d      	beq.n	8003876 <UART_SetConfig+0xae>
 800385a:	d81b      	bhi.n	8003894 <UART_SetConfig+0xcc>
 800385c:	2b02      	cmp	r3, #2
 800385e:	d014      	beq.n	800388a <UART_SetConfig+0xc2>
 8003860:	d818      	bhi.n	8003894 <UART_SetConfig+0xcc>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0xa4>
 8003866:	2b01      	cmp	r3, #1
 8003868:	d00a      	beq.n	8003880 <UART_SetConfig+0xb8>
 800386a:	e013      	b.n	8003894 <UART_SetConfig+0xcc>
 800386c:	231f      	movs	r3, #31
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e065      	b.n	8003942 <UART_SetConfig+0x17a>
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e060      	b.n	8003942 <UART_SetConfig+0x17a>
 8003880:	231f      	movs	r3, #31
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2204      	movs	r2, #4
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e05b      	b.n	8003942 <UART_SetConfig+0x17a>
 800388a:	231f      	movs	r3, #31
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2208      	movs	r2, #8
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e056      	b.n	8003942 <UART_SetConfig+0x17a>
 8003894:	231f      	movs	r3, #31
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2210      	movs	r2, #16
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e051      	b.n	8003942 <UART_SetConfig+0x17a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a89      	ldr	r2, [pc, #548]	; (8003ac8 <UART_SetConfig+0x300>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d134      	bne.n	8003912 <UART_SetConfig+0x14a>
 80038a8:	4b86      	ldr	r3, [pc, #536]	; (8003ac4 <UART_SetConfig+0x2fc>)
 80038aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ac:	23c0      	movs	r3, #192	; 0xc0
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	4013      	ands	r3, r2
 80038b2:	22c0      	movs	r2, #192	; 0xc0
 80038b4:	0292      	lsls	r2, r2, #10
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d017      	beq.n	80038ea <UART_SetConfig+0x122>
 80038ba:	22c0      	movs	r2, #192	; 0xc0
 80038bc:	0292      	lsls	r2, r2, #10
 80038be:	4293      	cmp	r3, r2
 80038c0:	d822      	bhi.n	8003908 <UART_SetConfig+0x140>
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	0292      	lsls	r2, r2, #10
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <UART_SetConfig+0x136>
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0292      	lsls	r2, r2, #10
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d81a      	bhi.n	8003908 <UART_SetConfig+0x140>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <UART_SetConfig+0x118>
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	0252      	lsls	r2, r2, #9
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00a      	beq.n	80038f4 <UART_SetConfig+0x12c>
 80038de:	e013      	b.n	8003908 <UART_SetConfig+0x140>
 80038e0:	231f      	movs	r3, #31
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e02b      	b.n	8003942 <UART_SetConfig+0x17a>
 80038ea:	231f      	movs	r3, #31
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e026      	b.n	8003942 <UART_SetConfig+0x17a>
 80038f4:	231f      	movs	r3, #31
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	2204      	movs	r2, #4
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e021      	b.n	8003942 <UART_SetConfig+0x17a>
 80038fe:	231f      	movs	r3, #31
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2208      	movs	r2, #8
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e01c      	b.n	8003942 <UART_SetConfig+0x17a>
 8003908:	231f      	movs	r3, #31
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2210      	movs	r2, #16
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e017      	b.n	8003942 <UART_SetConfig+0x17a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6d      	ldr	r2, [pc, #436]	; (8003acc <UART_SetConfig+0x304>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d104      	bne.n	8003926 <UART_SetConfig+0x15e>
 800391c:	231f      	movs	r3, #31
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e00d      	b.n	8003942 <UART_SetConfig+0x17a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a69      	ldr	r2, [pc, #420]	; (8003ad0 <UART_SetConfig+0x308>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d104      	bne.n	800393a <UART_SetConfig+0x172>
 8003930:	231f      	movs	r3, #31
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e003      	b.n	8003942 <UART_SetConfig+0x17a>
 800393a:	231f      	movs	r3, #31
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2210      	movs	r2, #16
 8003940:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	429a      	cmp	r2, r3
 800394c:	d15c      	bne.n	8003a08 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800394e:	231f      	movs	r3, #31
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d015      	beq.n	8003984 <UART_SetConfig+0x1bc>
 8003958:	dc18      	bgt.n	800398c <UART_SetConfig+0x1c4>
 800395a:	2b04      	cmp	r3, #4
 800395c:	d00d      	beq.n	800397a <UART_SetConfig+0x1b2>
 800395e:	dc15      	bgt.n	800398c <UART_SetConfig+0x1c4>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <UART_SetConfig+0x1a2>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0x1ac>
 8003968:	e010      	b.n	800398c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7ff fd25 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 800396e:	0003      	movs	r3, r0
 8003970:	61bb      	str	r3, [r7, #24]
        break;
 8003972:	e012      	b.n	800399a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <UART_SetConfig+0x30c>)
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e00f      	b.n	800399a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff fca1 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800397e:	0003      	movs	r3, r0
 8003980:	61bb      	str	r3, [r7, #24]
        break;
 8003982:	e00a      	b.n	800399a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	61bb      	str	r3, [r7, #24]
        break;
 800398a:	e006      	b.n	800399a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003990:	231e      	movs	r3, #30
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
        break;
 8003998:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d100      	bne.n	80039a2 <UART_SetConfig+0x1da>
 80039a0:	e07a      	b.n	8003a98 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	18d2      	adds	r2, r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0019      	movs	r1, r3
 80039b4:	0010      	movs	r0, r2
 80039b6:	f7fc fba7 	bl	8000108 <__udivsi3>
 80039ba:	0003      	movs	r3, r0
 80039bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d91c      	bls.n	80039fe <UART_SetConfig+0x236>
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	025b      	lsls	r3, r3, #9
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d217      	bcs.n	80039fe <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	200e      	movs	r0, #14
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	210f      	movs	r1, #15
 80039d8:	438a      	bics	r2, r1
 80039da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2207      	movs	r2, #7
 80039e4:	4013      	ands	r3, r2
 80039e6:	b299      	uxth	r1, r3
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	183a      	adds	r2, r7, r0
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	8812      	ldrh	r2, [r2, #0]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	e04c      	b.n	8003a98 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80039fe:	231e      	movs	r3, #30
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e047      	b.n	8003a98 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a08:	231f      	movs	r3, #31
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d015      	beq.n	8003a3e <UART_SetConfig+0x276>
 8003a12:	dc18      	bgt.n	8003a46 <UART_SetConfig+0x27e>
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00d      	beq.n	8003a34 <UART_SetConfig+0x26c>
 8003a18:	dc15      	bgt.n	8003a46 <UART_SetConfig+0x27e>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x25c>
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d005      	beq.n	8003a2e <UART_SetConfig+0x266>
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff fcc8 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e012      	b.n	8003a54 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <UART_SetConfig+0x30c>)
 8003a30:	61bb      	str	r3, [r7, #24]
        break;
 8003a32:	e00f      	b.n	8003a54 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a34:	f7ff fc44 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	61bb      	str	r3, [r7, #24]
        break;
 8003a3c:	e00a      	b.n	8003a54 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	61bb      	str	r3, [r7, #24]
        break;
 8003a44:	e006      	b.n	8003a54 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4a:	231e      	movs	r3, #30
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
        break;
 8003a52:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01e      	beq.n	8003a98 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	085a      	lsrs	r2, r3, #1
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	18d2      	adds	r2, r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0019      	movs	r1, r3
 8003a6a:	0010      	movs	r0, r2
 8003a6c:	f7fc fb4c 	bl	8000108 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d90a      	bls.n	8003a90 <UART_SetConfig+0x2c8>
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d205      	bcs.n	8003a90 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e003      	b.n	8003a98 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a90:	231e      	movs	r3, #30
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003aa4:	231e      	movs	r3, #30
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b008      	add	sp, #32
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	efff69f3 	.word	0xefff69f3
 8003ab8:	ffffcfff 	.word	0xffffcfff
 8003abc:	fffff4ff 	.word	0xfffff4ff
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40004800 	.word	0x40004800
 8003ad0:	40004c00 	.word	0x40004c00
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <UART_AdvFeatureConfig+0x144>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4a43      	ldr	r2, [pc, #268]	; (8003c20 <UART_AdvFeatureConfig+0x148>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	2204      	movs	r2, #4
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <UART_AdvFeatureConfig+0x14c>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <UART_AdvFeatureConfig+0x150>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <UART_AdvFeatureConfig+0x154>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	2220      	movs	r2, #32
 8003b90:	4013      	ands	r3, r2
 8003b92:	d00b      	beq.n	8003bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <UART_AdvFeatureConfig+0x158>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <UART_AdvFeatureConfig+0x15c>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	035b      	lsls	r3, r3, #13
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d10b      	bne.n	8003bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <UART_AdvFeatureConfig+0x160>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <UART_AdvFeatureConfig+0x164>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	fffdffff 	.word	0xfffdffff
 8003c20:	fffeffff 	.word	0xfffeffff
 8003c24:	fffbffff 	.word	0xfffbffff
 8003c28:	ffff7fff 	.word	0xffff7fff
 8003c2c:	ffffefff 	.word	0xffffefff
 8003c30:	ffffdfff 	.word	0xffffdfff
 8003c34:	ffefffff 	.word	0xffefffff
 8003c38:	ff9fffff 	.word	0xff9fffff
 8003c3c:	fff7ffff 	.word	0xfff7ffff

08003c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b092      	sub	sp, #72	; 0x48
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2284      	movs	r2, #132	; 0x84
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c50:	f7fd ff6e 	bl	8001b30 <HAL_GetTick>
 8003c54:	0003      	movs	r3, r0
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d12c      	bne.n	8003cc0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	0391      	lsls	r1, r2, #14
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4a46      	ldr	r2, [pc, #280]	; (8003d88 <UART_CheckIdleState+0x148>)
 8003c70:	9200      	str	r2, [sp, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f000 f88c 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d021      	beq.n	8003cc0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c86:	2301      	movs	r3, #1
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	438a      	bics	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2278      	movs	r2, #120	; 0x78
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e05f      	b.n	8003d80 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d146      	bne.n	8003d5c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	03d1      	lsls	r1, r2, #15
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <UART_CheckIdleState+0x148>)
 8003cd8:	9200      	str	r2, [sp, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f000 f858 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d03b      	beq.n	8003d5c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
 8003cee:	2301      	movs	r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4921      	ldr	r1, [pc, #132]	; (8003d8c <UART_CheckIdleState+0x14c>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d16:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d20:	2301      	movs	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2101      	movs	r1, #1
 8003d38:	438a      	bics	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2278      	movs	r2, #120	; 0x78
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e011      	b.n	8003d80 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	2120      	movs	r1, #32
 8003d68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2278      	movs	r2, #120	; 0x78
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b010      	add	sp, #64	; 0x40
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	01ffffff 	.word	0x01ffffff
 8003d8c:	fffffedf 	.word	0xfffffedf

08003d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	1dfb      	adds	r3, r7, #7
 8003d9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da0:	e04b      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3301      	adds	r3, #1
 8003da6:	d048      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fd fec2 	bl	8001b30 <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04b      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d035      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d111      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f83c 	bl	8003e64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2284      	movs	r2, #132	; 0x84
 8003df0:	2108      	movs	r1, #8
 8003df2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2278      	movs	r2, #120	; 0x78
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e02c      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d112      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 f81f 	bl	8003e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2284      	movs	r2, #132	; 0x84
 8003e2a:	2120      	movs	r1, #32
 8003e2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2278      	movs	r2, #120	; 0x78
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	425a      	negs	r2, r3
 8003e4a:	4153      	adcs	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	001a      	movs	r2, r3
 8003e50:	1dfb      	adds	r3, r7, #7
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d0a4      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	; 0x38
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e70:	617b      	str	r3, [r7, #20]
  return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4926      	ldr	r1, [pc, #152]	; (8003f28 <UART_EndRxTransfer+0xc4>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	623b      	str	r3, [r7, #32]
  return(result);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d118      	bne.n	8003f0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8003edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f383 8810 	msr	PRIMASK, r3
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2110      	movs	r1, #16
 8003efa:	438a      	bics	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f383 8810 	msr	PRIMASK, r3
}
 8003f08:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b00e      	add	sp, #56	; 0x38
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	fffffedf 	.word	0xfffffedf

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	2600      	movs	r6, #0
 8003f30:	4d0c      	ldr	r5, [pc, #48]	; (8003f64 <__libc_init_array+0x38>)
 8003f32:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f34:	1b64      	subs	r4, r4, r5
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	f000 f821 	bl	8003f84 <_init>
 8003f42:	4d0a      	ldr	r5, [pc, #40]	; (8003f6c <__libc_init_array+0x40>)
 8003f44:	4c0a      	ldr	r4, [pc, #40]	; (8003f70 <__libc_init_array+0x44>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	00b3      	lsls	r3, r6, #2
 8003f52:	58eb      	ldr	r3, [r5, r3]
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	00b3      	lsls	r3, r6, #2
 8003f5c:	58eb      	ldr	r3, [r5, r3]
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	08004054 	.word	0x08004054
 8003f68:	08004054 	.word	0x08004054
 8003f6c:	08004054 	.word	0x08004054
 8003f70:	08004058 	.word	0x08004058

08003f74 <memset>:
 8003f74:	0003      	movs	r3, r0
 8003f76:	1882      	adds	r2, r0, r2
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <_init>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr

08003f90 <_fini>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr
